Index: khtml_settings.h
===================================================================
--- khtml_settings.h	(revision 1132763)
+++ khtml_settings.h	(working copy)
@@ -23,6 +23,11 @@
 class KConfig;
 class KConfigGroup;
 
+// TODO: do not include config-khtml.h in this important file, do some work around
+#include "config-khtml.h"
+#ifdef KLEO_SUPPORT
+#include <gpgme++/key.h>
+#endif
 #include <khtml_export.h>
 
 #include <QtGui/QColor>
@@ -251,6 +256,11 @@
     // Whether to show passive popup when windows are blocked
     void setJSPopupBlockerPassivePopup(bool enabled);
     bool jsPopupBlockerPassivePopup() const;
+    
+#ifdef KLEO_SUPPORT
+    GpgME::Key pgpSigningKey();
+    GpgME::Key pgpEncryptionKey();
+#endif
 
 private:
     friend class KHTMLGlobal;
Index: config-khtml.h.cmake
===================================================================
--- config-khtml.h.cmake	(revision 1132763)
+++ config-khtml.h.cmake	(working copy)
@@ -7,5 +7,8 @@
 /* Valgrind memcheck presence */
 #cmakedefine HAVE_VALGRIND_MEMCHECK_H 1
 
+/* Support for the experimental crypt extension */
+#cmakedefine KLEO_SUPPORT 1
+
 #endif /* CONFIG_KHTML_H */
 
Index: khtml_settings.cpp
===================================================================
--- khtml_settings.cpp	(revision 1132763)
+++ khtml_settings.cpp	(working copy)
@@ -28,6 +28,15 @@
 #include <klocale.h>
 #include <kmessagebox.h>
 #include <khtml_filter_p.h>
+
+#ifdef KLEO_SUPPORT
+#include <kleo/keylistjob.h>
+#include <kleo/cryptobackendfactory.h>
+
+#include <gpgme++/keylistresult.h>
+#include <gpgme++/key.h>
+#endif
+
 #include <kstandarddirs.h>
 #include <kjob.h>
 #include <kio/job.h>
@@ -116,6 +125,14 @@
     QStringList fonts;
     QStringList defaultFonts;
 
+#ifdef KLEO_SUPPORT    
+    QString m_PGPSigningKeyFingerprint;
+    QString m_PGPEncryptionKeyFingerprint;
+
+    GpgME::Key m_PGPEncryptionKey;
+    GpgME::Key m_PGPSigningKey;
+#endif
+
     khtml::FilterSet adBlackList;
     khtml::FilterSet adWhiteList;
     QList< QPair< QString, QChar > > m_fallbackAccessKeysAssignments;
@@ -395,6 +412,16 @@
         d->m_bOpenMiddleClick = cg.readEntry( "OpenMiddleClick", true );
   }
 
+  #ifdef KLEO_SUPPORT
+  KConfigGroup cgCrypto(config,"Cryptography" );
+  if (reset || cgCrypto.exists() ) {
+      d->m_PGPSigningKeyFingerprint = cgCrypto.readEntry( "PGPSigningKey", QString());
+      d->m_PGPEncryptionKeyFingerprint = cgCrypto.readEntry( "PGPEncryptionKey", QString());
+      d->m_PGPSigningKey = GpgME::Key::null;
+      d->m_PGPEncryptionKey = GpgME::Key::null;
+  }
+  #endif
+  
   KConfigGroup cgAccess(config,"Access Keys" );
   if (reset || cgAccess.exists() ) {
       d->m_accessKeysEnabled = cgAccess.readEntry( "Enabled", true );
@@ -1211,4 +1238,53 @@
     return d->m_jsPopupBlockerPassivePopup;
 }
 
+#ifdef KLEO_SUPPORT
+GpgME::Key KHTMLSettings::pgpSigningKey()
+{
+    if (d->m_PGPSigningKeyFingerprint.isNull()) {
+        return GpgME::Key::null;
+    }
+
+    if (d->m_PGPSigningKey.isNull()) {
+        return d->m_PGPSigningKey;
+    }
+
+    // Obtain the keys associated with the given fingerprint
+    std::vector<GpgME::Key> keys;
+    Kleo::KeyListJob * job = Kleo::CryptoBackendFactory::instance()->openpgp()->keyListJob( false );
+    job->exec(QStringList(d->m_PGPSigningKeyFingerprint), true, keys);
+
+    if (!keys.empty()) {
+        d->m_PGPSigningKey = keys.front();
+    } else {
+        d->m_PGPSigningKeyFingerprint = QString();
+    }
+
+    return d->m_PGPSigningKey;
+}
+
+GpgME::Key KHTMLSettings::pgpEncryptionKey()
+{
+    if (d->m_PGPEncryptionKeyFingerprint.isNull()) {
+        return GpgME::Key::null;
+    }
+
+    if (d->m_PGPSigningKey.isNull()) {
+        return d->m_PGPEncryptionKey;
+    }
+
+    // Obtain the keys associated with the given fingerprint
+    std::vector<GpgME::Key> keys;
+    Kleo::KeyListJob * job = Kleo::CryptoBackendFactory::instance()->openpgp()->keyListJob( false );
+    job->exec(QStringList(d->m_PGPEncryptionKeyFingerprint), true, keys);
+
+    if (!keys.empty()) {
+        d->m_PGPEncryptionKey = keys.front();
+    } else {
+        d->m_PGPEncryptionKeyFingerprint = QString();
+    }
+
+    return d->m_PGPEncryptionKey;
+}
+#endif
 #include "khtml_settings.moc"
Index: khtml_ext.h
===================================================================
--- khtml_ext.h	(revision 1132763)
+++ khtml_ext.h	(working copy)
@@ -28,9 +28,8 @@
 #define __khtml_ext_h__
 
 #include "khtml_part.h"
-
+#include "config-khtml.h" // For KLEO_SUPPORT
 #include <QtCore/QPointer>
-
 #include <kselectaction.h>
 #include <kio/global.h>
 
@@ -148,6 +147,7 @@
   void slotBlockHost();
   void slotBlockIFrame();
     void openSelection();
+    void slotDetailsOfEncryptedMessage();
 
 private:
     void addSearchActions(QList<QAction *>& editActions);
Index: misc/htmlnames.h
===================================================================
--- misc/htmlnames.h	(revision 1132763)
+++ misc/htmlnames.h	(working copy)
@@ -191,434 +191,437 @@
 #define ATTR_DIRECTION ((DOM::emptyNamespace << 16) | 142)
 #define ATTR_DISABLED ((DOM::emptyNamespace << 16) | 143)
 #define ATTR_ENCTYPE ((DOM::emptyNamespace << 16) | 144)
-#define ATTR_FACE ((DOM::emptyNamespace << 16) | 145)
-#define ATTR_FRAMEBORDER ((DOM::emptyNamespace << 16) | 146)
-#define ATTR_HEIGHT ((DOM::emptyNamespace << 16) | 147)
-#define ATTR_HIDDEN ((DOM::emptyNamespace << 16) | 148)
-#define ATTR_HREFLANG ((DOM::emptyNamespace << 16) | 149)
-#define ATTR_HSPACE ((DOM::emptyNamespace << 16) | 150)
-#define ATTR_HTTP_EQUIV ((DOM::emptyNamespace << 16) | 151)
-#define ATTR_ISMAP ((DOM::emptyNamespace << 16) | 152)
-#define ATTR_XML_LANG ((DOM::xmlNamespace << 16) | 153)
-#define ATTR_LANG ((DOM::emptyNamespace << 16) | 153)
-#define ATTR_LANGUAGE ((DOM::emptyNamespace << 16) | 154)
-#define ATTR_LEFT ((DOM::emptyNamespace << 16) | 155)
-#define ATTR_LEFTMARGIN ((DOM::emptyNamespace << 16) | 156)
-#define ATTR_LOOP ((DOM::emptyNamespace << 16) | 157)
-#define ATTR_MARGINHEIGHT ((DOM::emptyNamespace << 16) | 158)
-#define ATTR_MARGINWIDTH ((DOM::emptyNamespace << 16) | 159)
-#define ATTR_MAXLENGTH ((DOM::emptyNamespace << 16) | 160)
-#define ATTR_MEDIA ((DOM::emptyNamespace << 16) | 161)
-#define ATTR_METHOD ((DOM::emptyNamespace << 16) | 162)
-#define ATTR_MULTIPLE ((DOM::emptyNamespace << 16) | 163)
-#define ATTR_NOHREF ((DOM::emptyNamespace << 16) | 164)
-#define ATTR_NORESIZE ((DOM::emptyNamespace << 16) | 165)
-#define ATTR_NOSAVE ((DOM::emptyNamespace << 16) | 166)
-#define ATTR_NOSHADE ((DOM::emptyNamespace << 16) | 167)
-#define ATTR_NOWRAP ((DOM::emptyNamespace << 16) | 168)
-#define ATTR_ONABORT ((DOM::emptyNamespace << 16) | 169)
-#define ATTR_ONERROR ((DOM::emptyNamespace << 16) | 170)
-#define ATTR_ONRESIZE ((DOM::emptyNamespace << 16) | 171)
-#define ATTR_OVERSRC ((DOM::emptyNamespace << 16) | 172)
-#define ATTR_PAGEX ((DOM::emptyNamespace << 16) | 173)
-#define ATTR_PAGEY ((DOM::emptyNamespace << 16) | 174)
-#define ATTR_PLAIN ((DOM::emptyNamespace << 16) | 175)
-#define ATTR_PLUGINPAGE ((DOM::emptyNamespace << 16) | 176)
-#define ATTR_PLUGINSPAGE ((DOM::emptyNamespace << 16) | 177)
-#define ATTR_PLUGINURL ((DOM::emptyNamespace << 16) | 178)
-#define ATTR_POSTER ((DOM::emptyNamespace << 16) | 179)
-#define ATTR_READONLY ((DOM::emptyNamespace << 16) | 180)
-#define ATTR_REL ((DOM::emptyNamespace << 16) | 181)
-#define ATTR_REV ((DOM::emptyNamespace << 16) | 182)
-#define ATTR_ROWS ((DOM::emptyNamespace << 16) | 183)
-#define ATTR_ROWSPAN ((DOM::emptyNamespace << 16) | 184)
-#define ATTR_RULES ((DOM::emptyNamespace << 16) | 185)
-#define ATTR_SCOPE ((DOM::emptyNamespace << 16) | 186)
-#define ATTR_SCROLLAMOUNT ((DOM::emptyNamespace << 16) | 187)
-#define ATTR_SCROLLDELAY ((DOM::emptyNamespace << 16) | 188)
-#define ATTR_SCROLLING ((DOM::emptyNamespace << 16) | 189)
-#define ATTR_SELECTED ((DOM::emptyNamespace << 16) | 190)
-#define ATTR_SHAPE ((DOM::emptyNamespace << 16) | 191)
-#define ATTR_SIZE ((DOM::emptyNamespace << 16) | 192)
-#define ATTR_START ((DOM::emptyNamespace << 16) | 193)
-#define ATTR_TABINDEX ((DOM::emptyNamespace << 16) | 194)
-#define ATTR_TARGET ((DOM::emptyNamespace << 16) | 195)
-#define ATTR_TEXT ((DOM::emptyNamespace << 16) | 196)
-#define ATTR_TOP ((DOM::emptyNamespace << 16) | 197)
-#define ATTR_TOPMARGIN ((DOM::emptyNamespace << 16) | 198)
-#define ATTR_TRUESPEED ((DOM::emptyNamespace << 16) | 199)
-#define ATTR_XLINK_TYPE ((DOM::xlinkNamespace << 16) | 200)
-#define ATTR_TYPE ((DOM::emptyNamespace << 16) | 200)
-#define ATTR_UNKNOWN ((DOM::emptyNamespace << 16) | 201)
-#define ATTR_VALIGN ((DOM::emptyNamespace << 16) | 202)
-#define ATTR_VALUETYPE ((DOM::emptyNamespace << 16) | 203)
-#define ATTR_VERSION ((DOM::emptyNamespace << 16) | 204)
-#define ATTR_VISIBILITY ((DOM::emptyNamespace << 16) | 205)
-#define ATTR_VLINK ((DOM::emptyNamespace << 16) | 206)
-#define ATTR_VSPACE ((DOM::emptyNamespace << 16) | 207)
-#define ATTR_WIDTH ((DOM::emptyNamespace << 16) | 208)
-#define ATTR_WRAP ((DOM::emptyNamespace << 16) | 209)
-#define ATTR_Z_INDEX ((DOM::emptyNamespace << 16) | 210)
-#define ATTR_ACTION ((DOM::emptyNamespace << 16) | 211)
-#define ATTR_ALT ((DOM::emptyNamespace << 16) | 212)
-#define ATTR_ARCHIVE ((DOM::emptyNamespace << 16) | 213)
-#define ATTR_BACKGROUND ((DOM::emptyNamespace << 16) | 214)
-#define ATTR_CLASS ((DOM::emptyNamespace << 16) | 215)
-#define ATTR_CLASSID ((DOM::emptyNamespace << 16) | 216)
-#define ATTR_CODEBASE ((DOM::emptyNamespace << 16) | 217)
-#define ATTR_CONTENT ((DOM::emptyNamespace << 16) | 218)
-#define ATTR_DATA ((DOM::emptyNamespace << 16) | 219)
-#define ATTR_DATETIME ((DOM::emptyNamespace << 16) | 220)
-#define ATTR_FOR ((DOM::emptyNamespace << 16) | 221)
-#define ATTR_HEADERS ((DOM::emptyNamespace << 16) | 222)
-#define ATTR_XLINK_HREF ((DOM::xlinkNamespace << 16) | 223)
-#define ATTR_HREF ((DOM::emptyNamespace << 16) | 223)
-#define ATTR_ID ((DOM::emptyNamespace << 16) | 224)
-#define ATTR_LONGDESC ((DOM::emptyNamespace << 16) | 225)
-#define ATTR_NAME ((DOM::emptyNamespace << 16) | 226)
-#define ATTR_ONBLUR ((DOM::emptyNamespace << 16) | 227)
-#define ATTR_ONCHANGE ((DOM::emptyNamespace << 16) | 228)
-#define ATTR_ONCLICK ((DOM::emptyNamespace << 16) | 229)
-#define ATTR_ONDBLCLICK ((DOM::emptyNamespace << 16) | 230)
-#define ATTR_ONFOCUS ((DOM::emptyNamespace << 16) | 231)
-#define ATTR_ONKEYDOWN ((DOM::emptyNamespace << 16) | 232)
-#define ATTR_ONKEYPRESS ((DOM::emptyNamespace << 16) | 233)
-#define ATTR_ONKEYUP ((DOM::emptyNamespace << 16) | 234)
-#define ATTR_ONLOAD ((DOM::emptyNamespace << 16) | 235)
-#define ATTR_ONMOUSEDOWN ((DOM::emptyNamespace << 16) | 236)
-#define ATTR_ONMOUSEMOVE ((DOM::emptyNamespace << 16) | 237)
-#define ATTR_ONMOUSEOUT ((DOM::emptyNamespace << 16) | 238)
-#define ATTR_ONMOUSEOVER ((DOM::emptyNamespace << 16) | 239)
-#define ATTR_ONMOUSEUP ((DOM::emptyNamespace << 16) | 240)
-#define ATTR_ONRESET ((DOM::emptyNamespace << 16) | 241)
-#define ATTR_ONSELECT ((DOM::emptyNamespace << 16) | 242)
-#define ATTR_ONSCROLL ((DOM::emptyNamespace << 16) | 243)
-#define ATTR_ONSUBMIT ((DOM::emptyNamespace << 16) | 244)
-#define ATTR_ONUNLOAD ((DOM::emptyNamespace << 16) | 245)
-#define ATTR_PROFILE ((DOM::emptyNamespace << 16) | 246)
-#define ATTR_PROMPT ((DOM::emptyNamespace << 16) | 247)
-#define ATTR_SCHEME ((DOM::emptyNamespace << 16) | 248)
-#define ATTR_SRC ((DOM::emptyNamespace << 16) | 249)
-#define ATTR_STANDBY ((DOM::emptyNamespace << 16) | 250)
-#define ATTR_SUMMARY ((DOM::emptyNamespace << 16) | 251)
-#define ATTR_USEMAP ((DOM::emptyNamespace << 16) | 252)
-#define ATTR_VALUE ((DOM::emptyNamespace << 16) | 253)
-#define ID_ALTGLYPH 254
-#define ID_ALTGLYPHDEF 255
-#define ID_ALTGLYPHITEM 256
-#define ID_ANIMATE 257
-#define ATTR_ANIMATE ((DOM::emptyNamespace << 16) | 257)
-#define ID_ANIMATECOLOR 258
-#define ID_ANIMATEMOTION 259
-#define ID_ANIMATETRANSFORM 260
-#define ID_SET 261
-#define ID_CIRCLE 262
-#define ID_CLIPPATH 263
-#define ID_COLOR_PROFILE 264
-#define ID_CURSOR 265
-#define ATTR_CURSOR ((DOM::emptyNamespace << 16) | 265)
-#define ID_DEFINITION_SRC 266
-#define ID_DEFS 267
-#define ID_DESC 268
-#define ID_ELLIPSE 269
-#define ID_FEBLEND 270
-#define ID_FECOLORMATRIX 271
-#define ATTR_FECOLORMATRIX ((DOM::emptyNamespace << 16) | 271)
-#define ID_FECOMPONENTTRANSFER 272
-#define ID_FECOMPOSITE 273
-#define ATTR_FECOMPOSITE ((DOM::emptyNamespace << 16) | 273)
-#define ID_FECONVOLVEMATRIX 274
-#define ID_FEDIFFUSELIGHTING 275
-#define ID_FEDISPLACEMENTMAP 276
-#define ID_FEDISTANTLIGHT 277
-#define ID_FEFLOOD 278
-#define ID_FEFUNCA 279
-#define ID_FEFUNCB 280
-#define ID_FEFUNCG 281
-#define ID_FEFUNCR 282
-#define ID_FEGAUSSIANBLUR 283
-#define ATTR_FEGAUSSIANBLUR ((DOM::emptyNamespace << 16) | 283)
-#define ID_FEIMAGE 284
-#define ID_FEMERGE 285
-#define ID_FEMERGENODE 286
-#define ID_FEMORPHOLOGY 287
-#define ATTR_FEMORPHOLOGY ((DOM::emptyNamespace << 16) | 287)
-#define ID_FEOFFSET 288
-#define ID_FEPOINTLIGHT 289
-#define ID_FESPECULARLIGHTING 290
-#define ID_FESPOTLIGHT 291
-#define ID_FETILE 292
-#define ATTR_FETILE ((DOM::emptyNamespace << 16) | 292)
-#define ID_FETURBULENCE 293
-#define ID_FILTER 294
-#define ATTR_FILTER ((DOM::emptyNamespace << 16) | 294)
-#define ID_FONT_FACE 295
-#define ID_FONT_FACE_FORMAT 296
-#define ID_FONT_FACE_NAME 297
-#define ID_FONT_FACE_SRC 298
-#define ID_FONT_FACE_URI 299
-#define ID_FOREIGNOBJECT 300
-#define ID_G 301
-#define ID_GLYPH 302
-#define ID_GLYPHREF 303
-#define ATTR_GLYPHREF ((DOM::emptyNamespace << 16) | 303)
-#define ID_HKERN 304
-#define ID_LINE 305
-#define ID_LINEARGRADIENT 306
-#define ID_MARKER 307
-#define ID_MASK 308
-#define ATTR_MASK ((DOM::emptyNamespace << 16) | 308)
-#define ID_METADATA 309
-#define ID_MISSING_GLYPH 310
-#define ID_MPATH 311
-#define ID_PATH 312
-#define ATTR_PATH ((DOM::emptyNamespace << 16) | 312)
-#define ID_PATTERN 313
-#define ID_POLYGON 314
-#define ID_POLYLINE 315
-#define ID_RADIALGRADIENT 316
-#define ID_RECT 317
-#define ID_STOP 318
-#define ID_SVG 319
-#define ID_SWITCH 320
-#define ID_SYMBOL 321
-#define ID_TEXTPATH 322
-#define ID_TREF 323
-#define ID_TSPAN 324
-#define ID_USE 325
-#define ID_VIEW 326
-#define ID_VKERN 327
-#define ATTR_ACCENT_HEIGHT ((DOM::emptyNamespace << 16) | 328)
-#define ATTR_ACCUMULATE ((DOM::emptyNamespace << 16) | 329)
-#define ATTR_ADDITIVE ((DOM::emptyNamespace << 16) | 330)
-#define ATTR_ALIGNMENT_BASELINE ((DOM::emptyNamespace << 16) | 331)
-#define ATTR_ALPHABETIC ((DOM::emptyNamespace << 16) | 332)
-#define ATTR_AMPLITUDE ((DOM::emptyNamespace << 16) | 333)
-#define ATTR_ARABIC_FORM ((DOM::emptyNamespace << 16) | 334)
-#define ATTR_ASCENT ((DOM::emptyNamespace << 16) | 335)
-#define ATTR_ATTRIBUTENAME ((DOM::emptyNamespace << 16) | 336)
-#define ATTR_ATTRIBUTETYPE ((DOM::emptyNamespace << 16) | 337)
-#define ATTR_AZIMUTH ((DOM::emptyNamespace << 16) | 338)
-#define ATTR_BASEFREQUENCY ((DOM::emptyNamespace << 16) | 339)
-#define ATTR_BASELINE_SHIFT ((DOM::emptyNamespace << 16) | 340)
-#define ATTR_BASEPROFILE ((DOM::emptyNamespace << 16) | 341)
-#define ATTR_BBOX ((DOM::emptyNamespace << 16) | 342)
-#define ATTR_BEGIN ((DOM::emptyNamespace << 16) | 343)
-#define ATTR_BIAS ((DOM::emptyNamespace << 16) | 344)
-#define ATTR_BY ((DOM::emptyNamespace << 16) | 345)
-#define ATTR_CALCMODE ((DOM::emptyNamespace << 16) | 346)
-#define ATTR_CAP_HEIGHT ((DOM::emptyNamespace << 16) | 347)
-#define ATTR_CLIP ((DOM::emptyNamespace << 16) | 348)
-#define ATTR_CLIP_PATH ((DOM::emptyNamespace << 16) | 349)
-#define ATTR_CLIP_RULE ((DOM::emptyNamespace << 16) | 350)
-#define ATTR_CLIPPATHUNITS ((DOM::emptyNamespace << 16) | 351)
-#define ATTR_COLOR_INTERPOLATION ((DOM::emptyNamespace << 16) | 352)
-#define ATTR_COLOR_INTERPOLATION_FILTERS ((DOM::emptyNamespace << 16) | 353)
-#define ATTR_COLOR_PROFILE ((DOM::emptyNamespace << 16) | 354)
-#define ATTR_COLOR_RENDERING ((DOM::emptyNamespace << 16) | 355)
-#define ATTR_CONTENTSCRIPTTYPE ((DOM::emptyNamespace << 16) | 356)
-#define ATTR_CONTENTSTYLETYPE ((DOM::emptyNamespace << 16) | 357)
-#define ATTR_CX ((DOM::emptyNamespace << 16) | 358)
-#define ATTR_CY ((DOM::emptyNamespace << 16) | 359)
-#define ATTR_D ((DOM::emptyNamespace << 16) | 360)
-#define ATTR_DESCENT ((DOM::emptyNamespace << 16) | 361)
-#define ATTR_DIFFUSECONSTANT ((DOM::emptyNamespace << 16) | 362)
-#define ATTR_DISPLAY ((DOM::emptyNamespace << 16) | 363)
-#define ATTR_DIVISOR ((DOM::emptyNamespace << 16) | 364)
-#define ATTR_DOMINANT_BASELINE ((DOM::emptyNamespace << 16) | 365)
-#define ATTR_DUR ((DOM::emptyNamespace << 16) | 366)
-#define ATTR_DX ((DOM::emptyNamespace << 16) | 367)
-#define ATTR_DY ((DOM::emptyNamespace << 16) | 368)
-#define ATTR_EDGEMODE ((DOM::emptyNamespace << 16) | 369)
-#define ATTR_ELEVATION ((DOM::emptyNamespace << 16) | 370)
-#define ATTR_ENABLE_BACKGROUND ((DOM::emptyNamespace << 16) | 371)
-#define ATTR_END ((DOM::emptyNamespace << 16) | 372)
-#define ATTR_EXPONENT ((DOM::emptyNamespace << 16) | 373)
-#define ATTR_EXTERNALRESOURCESREQUIRED ((DOM::emptyNamespace << 16) | 374)
-#define ATTR_FILL ((DOM::emptyNamespace << 16) | 375)
-#define ATTR_FILL_OPACITY ((DOM::emptyNamespace << 16) | 376)
-#define ATTR_FILL_RULE ((DOM::emptyNamespace << 16) | 377)
-#define ATTR_FILTERRES ((DOM::emptyNamespace << 16) | 378)
-#define ATTR_FILTERUNITS ((DOM::emptyNamespace << 16) | 379)
-#define ATTR_FLOOD_COLOR ((DOM::emptyNamespace << 16) | 380)
-#define ATTR_FLOOD_OPACITY ((DOM::emptyNamespace << 16) | 381)
-#define ATTR_FONT_FAMILY ((DOM::emptyNamespace << 16) | 382)
-#define ATTR_FONT_SIZE ((DOM::emptyNamespace << 16) | 383)
-#define ATTR_FONT_SIZE_ADJUST ((DOM::emptyNamespace << 16) | 384)
-#define ATTR_FONT_STRETCH ((DOM::emptyNamespace << 16) | 385)
-#define ATTR_FONT_STYLE ((DOM::emptyNamespace << 16) | 386)
-#define ATTR_FONT_VARIANT ((DOM::emptyNamespace << 16) | 387)
-#define ATTR_FONT_WEIGHT ((DOM::emptyNamespace << 16) | 388)
-#define ATTR_FORMAT ((DOM::emptyNamespace << 16) | 389)
-#define ATTR_FROM ((DOM::emptyNamespace << 16) | 390)
-#define ATTR_FX ((DOM::emptyNamespace << 16) | 391)
-#define ATTR_FY ((DOM::emptyNamespace << 16) | 392)
-#define ATTR_G1 ((DOM::emptyNamespace << 16) | 393)
-#define ATTR_G2 ((DOM::emptyNamespace << 16) | 394)
-#define ATTR_GLYPH_NAME ((DOM::emptyNamespace << 16) | 395)
-#define ATTR_GLYPH_ORIENTATION_HORIZONTAL ((DOM::emptyNamespace << 16) | 396)
-#define ATTR_GLYPH_ORIENTATION_VERTICAL ((DOM::emptyNamespace << 16) | 397)
-#define ATTR_GRADIENTTRANSFORM ((DOM::emptyNamespace << 16) | 398)
-#define ATTR_GRADIENTUNITS ((DOM::emptyNamespace << 16) | 399)
-#define ATTR_HANGING ((DOM::emptyNamespace << 16) | 400)
-#define ATTR_HORIZ_ADV_X ((DOM::emptyNamespace << 16) | 401)
-#define ATTR_HORIZ_ORIGIN_X ((DOM::emptyNamespace << 16) | 402)
-#define ATTR_HORIZ_ORIGIN_Y ((DOM::emptyNamespace << 16) | 403)
-#define ATTR_IDEOGRAPHIC ((DOM::emptyNamespace << 16) | 404)
-#define ATTR_IMAGE_RENDERING ((DOM::emptyNamespace << 16) | 405)
-#define ATTR_IN ((DOM::emptyNamespace << 16) | 406)
-#define ATTR_IN2 ((DOM::emptyNamespace << 16) | 407)
-#define ATTR_INTERCEPT ((DOM::emptyNamespace << 16) | 408)
-#define ATTR_K ((DOM::emptyNamespace << 16) | 409)
-#define ATTR_K1 ((DOM::emptyNamespace << 16) | 410)
-#define ATTR_K2 ((DOM::emptyNamespace << 16) | 411)
-#define ATTR_K3 ((DOM::emptyNamespace << 16) | 412)
-#define ATTR_K4 ((DOM::emptyNamespace << 16) | 413)
-#define ATTR_KERNELMATRIX ((DOM::emptyNamespace << 16) | 414)
-#define ATTR_KERNELUNITLENGTH ((DOM::emptyNamespace << 16) | 415)
-#define ATTR_KERNING ((DOM::emptyNamespace << 16) | 416)
-#define ATTR_KEYPOINTS ((DOM::emptyNamespace << 16) | 417)
-#define ATTR_KEYSPLINES ((DOM::emptyNamespace << 16) | 418)
-#define ATTR_KEYTIMES ((DOM::emptyNamespace << 16) | 419)
-#define ATTR_LENGTHADJUST ((DOM::emptyNamespace << 16) | 420)
-#define ATTR_LETTER_SPACING ((DOM::emptyNamespace << 16) | 421)
-#define ATTR_LIGHTING_COLOR ((DOM::emptyNamespace << 16) | 422)
-#define ATTR_LIMITINGCONEANGLE ((DOM::emptyNamespace << 16) | 423)
-#define ATTR_LOCAL ((DOM::emptyNamespace << 16) | 424)
-#define ATTR_MARKER_END ((DOM::emptyNamespace << 16) | 425)
-#define ATTR_MARKER_MID ((DOM::emptyNamespace << 16) | 426)
-#define ATTR_MARKER_START ((DOM::emptyNamespace << 16) | 427)
-#define ATTR_MARKERHEIGHT ((DOM::emptyNamespace << 16) | 428)
-#define ATTR_MARKERUNITS ((DOM::emptyNamespace << 16) | 429)
-#define ATTR_MARKERWIDTH ((DOM::emptyNamespace << 16) | 430)
-#define ATTR_MASKCONTENTUNITS ((DOM::emptyNamespace << 16) | 431)
-#define ATTR_MASKUNITS ((DOM::emptyNamespace << 16) | 432)
-#define ATTR_MATHEMATICAL ((DOM::emptyNamespace << 16) | 433)
-#define ATTR_MAX ((DOM::emptyNamespace << 16) | 434)
-#define ATTR_MIN ((DOM::emptyNamespace << 16) | 435)
-#define ATTR_MODE ((DOM::emptyNamespace << 16) | 436)
-#define ATTR_NUMOCTAVES ((DOM::emptyNamespace << 16) | 437)
-#define ATTR_OFFSET ((DOM::emptyNamespace << 16) | 438)
-#define ATTR_ONACTIVATE ((DOM::emptyNamespace << 16) | 439)
-#define ATTR_ONBEGIN ((DOM::emptyNamespace << 16) | 440)
-#define ATTR_ONEND ((DOM::emptyNamespace << 16) | 441)
-#define ATTR_ONFOCUSIN ((DOM::emptyNamespace << 16) | 442)
-#define ATTR_ONFOCUSOUT ((DOM::emptyNamespace << 16) | 443)
-#define ATTR_ONREPEAT ((DOM::emptyNamespace << 16) | 444)
-#define ATTR_ONZOOM ((DOM::emptyNamespace << 16) | 445)
-#define ATTR_OPACITY ((DOM::emptyNamespace << 16) | 446)
-#define ATTR_OPERATOR ((DOM::emptyNamespace << 16) | 447)
-#define ATTR_ORDER ((DOM::emptyNamespace << 16) | 448)
-#define ATTR_ORIENT ((DOM::emptyNamespace << 16) | 449)
-#define ATTR_ORIENTATION ((DOM::emptyNamespace << 16) | 450)
-#define ATTR_ORIGIN ((DOM::emptyNamespace << 16) | 451)
-#define ATTR_OVERFLOW ((DOM::emptyNamespace << 16) | 452)
-#define ATTR_OVERLINE_POSITION ((DOM::emptyNamespace << 16) | 453)
-#define ATTR_OVERLINE_THICKNESS ((DOM::emptyNamespace << 16) | 454)
-#define ATTR_PANOSE_1 ((DOM::emptyNamespace << 16) | 455)
-#define ATTR_PATHLENGTH ((DOM::emptyNamespace << 16) | 456)
-#define ATTR_PATTERNCONTENTUNITS ((DOM::emptyNamespace << 16) | 457)
-#define ATTR_PATTERNTRANSFORM ((DOM::emptyNamespace << 16) | 458)
-#define ATTR_PATTERNUNITS ((DOM::emptyNamespace << 16) | 459)
-#define ATTR_POINTER_EVENTS ((DOM::emptyNamespace << 16) | 460)
-#define ATTR_POINTS ((DOM::emptyNamespace << 16) | 461)
-#define ATTR_POINTSATX ((DOM::emptyNamespace << 16) | 462)
-#define ATTR_POINTSATY ((DOM::emptyNamespace << 16) | 463)
-#define ATTR_POINTSATZ ((DOM::emptyNamespace << 16) | 464)
-#define ATTR_PRESERVEALPHA ((DOM::emptyNamespace << 16) | 465)
-#define ATTR_PRESERVEASPECTRATIO ((DOM::emptyNamespace << 16) | 466)
-#define ATTR_PRIMITIVEUNITS ((DOM::emptyNamespace << 16) | 467)
-#define ATTR_R ((DOM::emptyNamespace << 16) | 468)
-#define ATTR_RADIUS ((DOM::emptyNamespace << 16) | 469)
-#define ATTR_REFX ((DOM::emptyNamespace << 16) | 470)
-#define ATTR_REFY ((DOM::emptyNamespace << 16) | 471)
-#define ATTR_RENDERING_INTENT ((DOM::emptyNamespace << 16) | 472)
-#define ATTR_REPEATCOUNT ((DOM::emptyNamespace << 16) | 473)
-#define ATTR_REPEATDUR ((DOM::emptyNamespace << 16) | 474)
-#define ATTR_REQUIREDEXTENSIONS ((DOM::emptyNamespace << 16) | 475)
-#define ATTR_REQUIREDFEATURES ((DOM::emptyNamespace << 16) | 476)
-#define ATTR_RESTART ((DOM::emptyNamespace << 16) | 477)
-#define ATTR_RESULT ((DOM::emptyNamespace << 16) | 478)
-#define ATTR_ROTATE ((DOM::emptyNamespace << 16) | 479)
-#define ATTR_RX ((DOM::emptyNamespace << 16) | 480)
-#define ATTR_RY ((DOM::emptyNamespace << 16) | 481)
-#define ATTR_SCALE ((DOM::emptyNamespace << 16) | 482)
-#define ATTR_SEED ((DOM::emptyNamespace << 16) | 483)
-#define ATTR_SHAPE_RENDERING ((DOM::emptyNamespace << 16) | 484)
-#define ATTR_SLOPE ((DOM::emptyNamespace << 16) | 485)
-#define ATTR_SPACING ((DOM::emptyNamespace << 16) | 486)
-#define ATTR_SPECULARCONSTANT ((DOM::emptyNamespace << 16) | 487)
-#define ATTR_SPECULAREXPONENT ((DOM::emptyNamespace << 16) | 488)
-#define ATTR_SPREADMETHOD ((DOM::emptyNamespace << 16) | 489)
-#define ATTR_STARTOFFSET ((DOM::emptyNamespace << 16) | 490)
-#define ATTR_STDDEVIATION ((DOM::emptyNamespace << 16) | 491)
-#define ATTR_STEMH ((DOM::emptyNamespace << 16) | 492)
-#define ATTR_STEMV ((DOM::emptyNamespace << 16) | 493)
-#define ATTR_STITCHTILES ((DOM::emptyNamespace << 16) | 494)
-#define ATTR_STOP_COLOR ((DOM::emptyNamespace << 16) | 495)
-#define ATTR_STOP_OPACITY ((DOM::emptyNamespace << 16) | 496)
-#define ATTR_STRIKETHROUGH_POSITION ((DOM::emptyNamespace << 16) | 497)
-#define ATTR_STRIKETHROUGH_THICKNESS ((DOM::emptyNamespace << 16) | 498)
-#define ATTR_STROKE ((DOM::emptyNamespace << 16) | 499)
-#define ATTR_STROKE_DASHARRAY ((DOM::emptyNamespace << 16) | 500)
-#define ATTR_STROKE_DASHOFFSET ((DOM::emptyNamespace << 16) | 501)
-#define ATTR_STROKE_LINECAP ((DOM::emptyNamespace << 16) | 502)
-#define ATTR_STROKE_LINEJOIN ((DOM::emptyNamespace << 16) | 503)
-#define ATTR_STROKE_MITERLIMIT ((DOM::emptyNamespace << 16) | 504)
-#define ATTR_STROKE_OPACITY ((DOM::emptyNamespace << 16) | 505)
-#define ATTR_STROKE_WIDTH ((DOM::emptyNamespace << 16) | 506)
-#define ATTR_SURFACESCALE ((DOM::emptyNamespace << 16) | 507)
-#define ATTR_SYSTEMLANGUAGE ((DOM::emptyNamespace << 16) | 508)
-#define ATTR_TABLEVALUES ((DOM::emptyNamespace << 16) | 509)
-#define ATTR_TARGETX ((DOM::emptyNamespace << 16) | 510)
-#define ATTR_TARGETY ((DOM::emptyNamespace << 16) | 511)
-#define ATTR_TEXT_ANCHOR ((DOM::emptyNamespace << 16) | 512)
-#define ATTR_TEXT_DECORATION ((DOM::emptyNamespace << 16) | 513)
-#define ATTR_TEXT_RENDERING ((DOM::emptyNamespace << 16) | 514)
-#define ATTR_TEXTLENGTH ((DOM::emptyNamespace << 16) | 515)
-#define ATTR_TO ((DOM::emptyNamespace << 16) | 516)
-#define ATTR_TRANSFORM ((DOM::emptyNamespace << 16) | 517)
-#define ATTR_U1 ((DOM::emptyNamespace << 16) | 518)
-#define ATTR_U2 ((DOM::emptyNamespace << 16) | 519)
-#define ATTR_UNDERLINE_POSITION ((DOM::emptyNamespace << 16) | 520)
-#define ATTR_UNDERLINE_THICKNESS ((DOM::emptyNamespace << 16) | 521)
-#define ATTR_UNICODE ((DOM::emptyNamespace << 16) | 522)
-#define ATTR_UNICODE_BIDI ((DOM::emptyNamespace << 16) | 523)
-#define ATTR_UNICODE_RANGE ((DOM::emptyNamespace << 16) | 524)
-#define ATTR_UNITS_PER_EM ((DOM::emptyNamespace << 16) | 525)
-#define ATTR_V_ALPHABETIC ((DOM::emptyNamespace << 16) | 526)
-#define ATTR_V_HANGING ((DOM::emptyNamespace << 16) | 527)
-#define ATTR_V_IDEOGRAPHIC ((DOM::emptyNamespace << 16) | 528)
-#define ATTR_V_MATHEMATICAL ((DOM::emptyNamespace << 16) | 529)
-#define ATTR_VALUES ((DOM::emptyNamespace << 16) | 530)
-#define ATTR_VERT_ADV_Y ((DOM::emptyNamespace << 16) | 531)
-#define ATTR_VERT_ORIGIN_X ((DOM::emptyNamespace << 16) | 532)
-#define ATTR_VERT_ORIGIN_Y ((DOM::emptyNamespace << 16) | 533)
-#define ATTR_VIEWBOX ((DOM::emptyNamespace << 16) | 534)
-#define ATTR_VIEWTARGET ((DOM::emptyNamespace << 16) | 535)
-#define ATTR_WIDTHS ((DOM::emptyNamespace << 16) | 536)
-#define ATTR_WORD_SPACING ((DOM::emptyNamespace << 16) | 537)
-#define ATTR_WRITING_MODE ((DOM::emptyNamespace << 16) | 538)
-#define ATTR_X ((DOM::emptyNamespace << 16) | 539)
-#define ATTR_X_HEIGHT ((DOM::emptyNamespace << 16) | 540)
-#define ATTR_X1 ((DOM::emptyNamespace << 16) | 541)
-#define ATTR_X2 ((DOM::emptyNamespace << 16) | 542)
-#define ATTR_XCHANNELSELECTOR ((DOM::emptyNamespace << 16) | 543)
-#define ATTR_Y ((DOM::emptyNamespace << 16) | 544)
-#define ATTR_Y1 ((DOM::emptyNamespace << 16) | 545)
-#define ATTR_Y2 ((DOM::emptyNamespace << 16) | 546)
-#define ATTR_YCHANNELSELECTOR ((DOM::emptyNamespace << 16) | 547)
-#define ATTR_Z ((DOM::emptyNamespace << 16) | 548)
-#define ATTR_ZOOMANDPAN ((DOM::emptyNamespace << 16) | 549)
-#define ATTR_XLINK_ACTUATE ((DOM::xlinkNamespace << 16) | 550)
-#define ATTR_XLINK_ARCROLE ((DOM::xlinkNamespace << 16) | 551)
-#define ATTR_XLINK_ROLE ((DOM::xlinkNamespace << 16) | 552)
-#define ATTR_XLINK_SHOW ((DOM::xlinkNamespace << 16) | 553)
-#define ATTR_XML_SPACE ((DOM::xmlNamespace << 16) | 554)
+#define ATTR_ENCRYPTION ((DOM::emptyNamespace << 16) | 145)
+#define ATTR_ENCRYPTION_KEY ((DOM::emptyNamespace << 16) | 146)
+#define ATTR_FACE ((DOM::emptyNamespace << 16) | 147)
+#define ATTR_FRAMEBORDER ((DOM::emptyNamespace << 16) | 148)
+#define ATTR_HEIGHT ((DOM::emptyNamespace << 16) | 149)
+#define ATTR_HIDDEN ((DOM::emptyNamespace << 16) | 150)
+#define ATTR_HREFLANG ((DOM::emptyNamespace << 16) | 151)
+#define ATTR_HSPACE ((DOM::emptyNamespace << 16) | 152)
+#define ATTR_HTTP_EQUIV ((DOM::emptyNamespace << 16) | 153)
+#define ATTR_ISMAP ((DOM::emptyNamespace << 16) | 154)
+#define ATTR_XML_LANG ((DOM::xmlNamespace << 16) | 155)
+#define ATTR_LANG ((DOM::emptyNamespace << 16) | 155)
+#define ATTR_LANGUAGE ((DOM::emptyNamespace << 16) | 156)
+#define ATTR_LEFT ((DOM::emptyNamespace << 16) | 157)
+#define ATTR_LEFTMARGIN ((DOM::emptyNamespace << 16) | 158)
+#define ATTR_LOOP ((DOM::emptyNamespace << 16) | 159)
+#define ATTR_MARGINHEIGHT ((DOM::emptyNamespace << 16) | 160)
+#define ATTR_MARGINWIDTH ((DOM::emptyNamespace << 16) | 161)
+#define ATTR_MAXLENGTH ((DOM::emptyNamespace << 16) | 162)
+#define ATTR_MEDIA ((DOM::emptyNamespace << 16) | 163)
+#define ATTR_METHOD ((DOM::emptyNamespace << 16) | 164)
+#define ATTR_MULTIPLE ((DOM::emptyNamespace << 16) | 165)
+#define ATTR_NOHREF ((DOM::emptyNamespace << 16) | 166)
+#define ATTR_NORESIZE ((DOM::emptyNamespace << 16) | 167)
+#define ATTR_NOSAVE ((DOM::emptyNamespace << 16) | 168)
+#define ATTR_NOSHADE ((DOM::emptyNamespace << 16) | 169)
+#define ATTR_NOWRAP ((DOM::emptyNamespace << 16) | 170)
+#define ATTR_ONABORT ((DOM::emptyNamespace << 16) | 171)
+#define ATTR_ONERROR ((DOM::emptyNamespace << 16) | 172)
+#define ATTR_ONRESIZE ((DOM::emptyNamespace << 16) | 173)
+#define ATTR_OVERSRC ((DOM::emptyNamespace << 16) | 174)
+#define ATTR_PAGEX ((DOM::emptyNamespace << 16) | 175)
+#define ATTR_PAGEY ((DOM::emptyNamespace << 16) | 176)
+#define ATTR_PLAIN ((DOM::emptyNamespace << 16) | 177)
+#define ATTR_PLUGINPAGE ((DOM::emptyNamespace << 16) | 178)
+#define ATTR_PLUGINSPAGE ((DOM::emptyNamespace << 16) | 179)
+#define ATTR_PLUGINURL ((DOM::emptyNamespace << 16) | 180)
+#define ATTR_POSTER ((DOM::emptyNamespace << 16) | 181)
+#define ATTR_READONLY ((DOM::emptyNamespace << 16) | 182)
+#define ATTR_REL ((DOM::emptyNamespace << 16) | 183)
+#define ATTR_REV ((DOM::emptyNamespace << 16) | 184)
+#define ATTR_ROWS ((DOM::emptyNamespace << 16) | 185)
+#define ATTR_ROWSPAN ((DOM::emptyNamespace << 16) | 186)
+#define ATTR_RULES ((DOM::emptyNamespace << 16) | 187)
+#define ATTR_SCOPE ((DOM::emptyNamespace << 16) | 188)
+#define ATTR_SCROLLAMOUNT ((DOM::emptyNamespace << 16) | 189)
+#define ATTR_SCROLLDELAY ((DOM::emptyNamespace << 16) | 190)
+#define ATTR_SCROLLING ((DOM::emptyNamespace << 16) | 191)
+#define ATTR_SELECTED ((DOM::emptyNamespace << 16) | 192)
+#define ATTR_SHAPE ((DOM::emptyNamespace << 16) | 193)
+#define ATTR_SIGNING_KEY ((DOM::emptyNamespace << 16) | 194)
+#define ATTR_SIZE ((DOM::emptyNamespace << 16) | 195)
+#define ATTR_START ((DOM::emptyNamespace << 16) | 196)
+#define ATTR_TABINDEX ((DOM::emptyNamespace << 16) | 197)
+#define ATTR_TARGET ((DOM::emptyNamespace << 16) | 198)
+#define ATTR_TEXT ((DOM::emptyNamespace << 16) | 199)
+#define ATTR_TOP ((DOM::emptyNamespace << 16) | 200)
+#define ATTR_TOPMARGIN ((DOM::emptyNamespace << 16) | 201)
+#define ATTR_TRUESPEED ((DOM::emptyNamespace << 16) | 202)
+#define ATTR_XLINK_TYPE ((DOM::xlinkNamespace << 16) | 203)
+#define ATTR_TYPE ((DOM::emptyNamespace << 16) | 203)
+#define ATTR_UNKNOWN ((DOM::emptyNamespace << 16) | 204)
+#define ATTR_VALIGN ((DOM::emptyNamespace << 16) | 205)
+#define ATTR_VALUETYPE ((DOM::emptyNamespace << 16) | 206)
+#define ATTR_VERSION ((DOM::emptyNamespace << 16) | 207)
+#define ATTR_VISIBILITY ((DOM::emptyNamespace << 16) | 208)
+#define ATTR_VLINK ((DOM::emptyNamespace << 16) | 209)
+#define ATTR_VSPACE ((DOM::emptyNamespace << 16) | 210)
+#define ATTR_WIDTH ((DOM::emptyNamespace << 16) | 211)
+#define ATTR_WRAP ((DOM::emptyNamespace << 16) | 212)
+#define ATTR_Z_INDEX ((DOM::emptyNamespace << 16) | 213)
+#define ATTR_ACTION ((DOM::emptyNamespace << 16) | 214)
+#define ATTR_ALT ((DOM::emptyNamespace << 16) | 215)
+#define ATTR_ARCHIVE ((DOM::emptyNamespace << 16) | 216)
+#define ATTR_BACKGROUND ((DOM::emptyNamespace << 16) | 217)
+#define ATTR_CLASS ((DOM::emptyNamespace << 16) | 218)
+#define ATTR_CLASSID ((DOM::emptyNamespace << 16) | 219)
+#define ATTR_CODEBASE ((DOM::emptyNamespace << 16) | 220)
+#define ATTR_CONTENT ((DOM::emptyNamespace << 16) | 221)
+#define ATTR_DATA ((DOM::emptyNamespace << 16) | 222)
+#define ATTR_DATETIME ((DOM::emptyNamespace << 16) | 223)
+#define ATTR_FOR ((DOM::emptyNamespace << 16) | 224)
+#define ATTR_HEADERS ((DOM::emptyNamespace << 16) | 225)
+#define ATTR_XLINK_HREF ((DOM::xlinkNamespace << 16) | 226)
+#define ATTR_HREF ((DOM::emptyNamespace << 16) | 226)
+#define ATTR_ID ((DOM::emptyNamespace << 16) | 227)
+#define ATTR_LONGDESC ((DOM::emptyNamespace << 16) | 228)
+#define ATTR_NAME ((DOM::emptyNamespace << 16) | 229)
+#define ATTR_ONBLUR ((DOM::emptyNamespace << 16) | 230)
+#define ATTR_ONCHANGE ((DOM::emptyNamespace << 16) | 231)
+#define ATTR_ONCLICK ((DOM::emptyNamespace << 16) | 232)
+#define ATTR_ONDBLCLICK ((DOM::emptyNamespace << 16) | 233)
+#define ATTR_ONFOCUS ((DOM::emptyNamespace << 16) | 234)
+#define ATTR_ONKEYDOWN ((DOM::emptyNamespace << 16) | 235)
+#define ATTR_ONKEYPRESS ((DOM::emptyNamespace << 16) | 236)
+#define ATTR_ONKEYUP ((DOM::emptyNamespace << 16) | 237)
+#define ATTR_ONLOAD ((DOM::emptyNamespace << 16) | 238)
+#define ATTR_ONMOUSEDOWN ((DOM::emptyNamespace << 16) | 239)
+#define ATTR_ONMOUSEMOVE ((DOM::emptyNamespace << 16) | 240)
+#define ATTR_ONMOUSEOUT ((DOM::emptyNamespace << 16) | 241)
+#define ATTR_ONMOUSEOVER ((DOM::emptyNamespace << 16) | 242)
+#define ATTR_ONMOUSEUP ((DOM::emptyNamespace << 16) | 243)
+#define ATTR_ONRESET ((DOM::emptyNamespace << 16) | 244)
+#define ATTR_ONSELECT ((DOM::emptyNamespace << 16) | 245)
+#define ATTR_ONSCROLL ((DOM::emptyNamespace << 16) | 246)
+#define ATTR_ONSUBMIT ((DOM::emptyNamespace << 16) | 247)
+#define ATTR_ONUNLOAD ((DOM::emptyNamespace << 16) | 248)
+#define ATTR_PROFILE ((DOM::emptyNamespace << 16) | 249)
+#define ATTR_PROMPT ((DOM::emptyNamespace << 16) | 250)
+#define ATTR_SCHEME ((DOM::emptyNamespace << 16) | 251)
+#define ATTR_SRC ((DOM::emptyNamespace << 16) | 252)
+#define ATTR_STANDBY ((DOM::emptyNamespace << 16) | 253)
+#define ATTR_SUMMARY ((DOM::emptyNamespace << 16) | 254)
+#define ATTR_USEMAP ((DOM::emptyNamespace << 16) | 255)
+#define ATTR_VALUE ((DOM::emptyNamespace << 16) | 256)
+#define ID_ALTGLYPH 257
+#define ID_ALTGLYPHDEF 258
+#define ID_ALTGLYPHITEM 259
+#define ID_ANIMATE 260
+#define ATTR_ANIMATE ((DOM::emptyNamespace << 16) | 260)
+#define ID_ANIMATECOLOR 261
+#define ID_ANIMATEMOTION 262
+#define ID_ANIMATETRANSFORM 263
+#define ID_SET 264
+#define ID_CIRCLE 265
+#define ID_CLIPPATH 266
+#define ID_COLOR_PROFILE 267
+#define ID_CURSOR 268
+#define ATTR_CURSOR ((DOM::emptyNamespace << 16) | 268)
+#define ID_DEFINITION_SRC 269
+#define ID_DEFS 270
+#define ID_DESC 271
+#define ID_ELLIPSE 272
+#define ID_FEBLEND 273
+#define ID_FECOLORMATRIX 274
+#define ATTR_FECOLORMATRIX ((DOM::emptyNamespace << 16) | 274)
+#define ID_FECOMPONENTTRANSFER 275
+#define ID_FECOMPOSITE 276
+#define ATTR_FECOMPOSITE ((DOM::emptyNamespace << 16) | 276)
+#define ID_FECONVOLVEMATRIX 277
+#define ID_FEDIFFUSELIGHTING 278
+#define ID_FEDISPLACEMENTMAP 279
+#define ID_FEDISTANTLIGHT 280
+#define ID_FEFLOOD 281
+#define ID_FEFUNCA 282
+#define ID_FEFUNCB 283
+#define ID_FEFUNCG 284
+#define ID_FEFUNCR 285
+#define ID_FEGAUSSIANBLUR 286
+#define ATTR_FEGAUSSIANBLUR ((DOM::emptyNamespace << 16) | 286)
+#define ID_FEIMAGE 287
+#define ID_FEMERGE 288
+#define ID_FEMERGENODE 289
+#define ID_FEMORPHOLOGY 290
+#define ATTR_FEMORPHOLOGY ((DOM::emptyNamespace << 16) | 290)
+#define ID_FEOFFSET 291
+#define ID_FEPOINTLIGHT 292
+#define ID_FESPECULARLIGHTING 293
+#define ID_FESPOTLIGHT 294
+#define ID_FETILE 295
+#define ATTR_FETILE ((DOM::emptyNamespace << 16) | 295)
+#define ID_FETURBULENCE 296
+#define ID_FILTER 297
+#define ATTR_FILTER ((DOM::emptyNamespace << 16) | 297)
+#define ID_FONT_FACE 298
+#define ID_FONT_FACE_FORMAT 299
+#define ID_FONT_FACE_NAME 300
+#define ID_FONT_FACE_SRC 301
+#define ID_FONT_FACE_URI 302
+#define ID_FOREIGNOBJECT 303
+#define ID_G 304
+#define ID_GLYPH 305
+#define ID_GLYPHREF 306
+#define ATTR_GLYPHREF ((DOM::emptyNamespace << 16) | 306)
+#define ID_HKERN 307
+#define ID_LINE 308
+#define ID_LINEARGRADIENT 309
+#define ID_MARKER 310
+#define ID_MASK 311
+#define ATTR_MASK ((DOM::emptyNamespace << 16) | 311)
+#define ID_METADATA 312
+#define ID_MISSING_GLYPH 313
+#define ID_MPATH 314
+#define ID_PATH 315
+#define ATTR_PATH ((DOM::emptyNamespace << 16) | 315)
+#define ID_PATTERN 316
+#define ID_POLYGON 317
+#define ID_POLYLINE 318
+#define ID_RADIALGRADIENT 319
+#define ID_RECT 320
+#define ID_STOP 321
+#define ID_SVG 322
+#define ID_SWITCH 323
+#define ID_SYMBOL 324
+#define ID_TEXTPATH 325
+#define ID_TREF 326
+#define ID_TSPAN 327
+#define ID_USE 328
+#define ID_VIEW 329
+#define ID_VKERN 330
+#define ATTR_ACCENT_HEIGHT ((DOM::emptyNamespace << 16) | 331)
+#define ATTR_ACCUMULATE ((DOM::emptyNamespace << 16) | 332)
+#define ATTR_ADDITIVE ((DOM::emptyNamespace << 16) | 333)
+#define ATTR_ALIGNMENT_BASELINE ((DOM::emptyNamespace << 16) | 334)
+#define ATTR_ALPHABETIC ((DOM::emptyNamespace << 16) | 335)
+#define ATTR_AMPLITUDE ((DOM::emptyNamespace << 16) | 336)
+#define ATTR_ARABIC_FORM ((DOM::emptyNamespace << 16) | 337)
+#define ATTR_ASCENT ((DOM::emptyNamespace << 16) | 338)
+#define ATTR_ATTRIBUTENAME ((DOM::emptyNamespace << 16) | 339)
+#define ATTR_ATTRIBUTETYPE ((DOM::emptyNamespace << 16) | 340)
+#define ATTR_AZIMUTH ((DOM::emptyNamespace << 16) | 341)
+#define ATTR_BASEFREQUENCY ((DOM::emptyNamespace << 16) | 342)
+#define ATTR_BASELINE_SHIFT ((DOM::emptyNamespace << 16) | 343)
+#define ATTR_BASEPROFILE ((DOM::emptyNamespace << 16) | 344)
+#define ATTR_BBOX ((DOM::emptyNamespace << 16) | 345)
+#define ATTR_BEGIN ((DOM::emptyNamespace << 16) | 346)
+#define ATTR_BIAS ((DOM::emptyNamespace << 16) | 347)
+#define ATTR_BY ((DOM::emptyNamespace << 16) | 348)
+#define ATTR_CALCMODE ((DOM::emptyNamespace << 16) | 349)
+#define ATTR_CAP_HEIGHT ((DOM::emptyNamespace << 16) | 350)
+#define ATTR_CLIP ((DOM::emptyNamespace << 16) | 351)
+#define ATTR_CLIP_PATH ((DOM::emptyNamespace << 16) | 352)
+#define ATTR_CLIP_RULE ((DOM::emptyNamespace << 16) | 353)
+#define ATTR_CLIPPATHUNITS ((DOM::emptyNamespace << 16) | 354)
+#define ATTR_COLOR_INTERPOLATION ((DOM::emptyNamespace << 16) | 355)
+#define ATTR_COLOR_INTERPOLATION_FILTERS ((DOM::emptyNamespace << 16) | 356)
+#define ATTR_COLOR_PROFILE ((DOM::emptyNamespace << 16) | 357)
+#define ATTR_COLOR_RENDERING ((DOM::emptyNamespace << 16) | 358)
+#define ATTR_CONTENTSCRIPTTYPE ((DOM::emptyNamespace << 16) | 359)
+#define ATTR_CONTENTSTYLETYPE ((DOM::emptyNamespace << 16) | 360)
+#define ATTR_CX ((DOM::emptyNamespace << 16) | 361)
+#define ATTR_CY ((DOM::emptyNamespace << 16) | 362)
+#define ATTR_D ((DOM::emptyNamespace << 16) | 363)
+#define ATTR_DESCENT ((DOM::emptyNamespace << 16) | 364)
+#define ATTR_DIFFUSECONSTANT ((DOM::emptyNamespace << 16) | 365)
+#define ATTR_DISPLAY ((DOM::emptyNamespace << 16) | 366)
+#define ATTR_DIVISOR ((DOM::emptyNamespace << 16) | 367)
+#define ATTR_DOMINANT_BASELINE ((DOM::emptyNamespace << 16) | 368)
+#define ATTR_DUR ((DOM::emptyNamespace << 16) | 369)
+#define ATTR_DX ((DOM::emptyNamespace << 16) | 370)
+#define ATTR_DY ((DOM::emptyNamespace << 16) | 371)
+#define ATTR_EDGEMODE ((DOM::emptyNamespace << 16) | 372)
+#define ATTR_ELEVATION ((DOM::emptyNamespace << 16) | 373)
+#define ATTR_ENABLE_BACKGROUND ((DOM::emptyNamespace << 16) | 374)
+#define ATTR_END ((DOM::emptyNamespace << 16) | 375)
+#define ATTR_EXPONENT ((DOM::emptyNamespace << 16) | 376)
+#define ATTR_EXTERNALRESOURCESREQUIRED ((DOM::emptyNamespace << 16) | 377)
+#define ATTR_FILL ((DOM::emptyNamespace << 16) | 378)
+#define ATTR_FILL_OPACITY ((DOM::emptyNamespace << 16) | 379)
+#define ATTR_FILL_RULE ((DOM::emptyNamespace << 16) | 380)
+#define ATTR_FILTERRES ((DOM::emptyNamespace << 16) | 381)
+#define ATTR_FILTERUNITS ((DOM::emptyNamespace << 16) | 382)
+#define ATTR_FLOOD_COLOR ((DOM::emptyNamespace << 16) | 383)
+#define ATTR_FLOOD_OPACITY ((DOM::emptyNamespace << 16) | 384)
+#define ATTR_FONT_FAMILY ((DOM::emptyNamespace << 16) | 385)
+#define ATTR_FONT_SIZE ((DOM::emptyNamespace << 16) | 386)
+#define ATTR_FONT_SIZE_ADJUST ((DOM::emptyNamespace << 16) | 387)
+#define ATTR_FONT_STRETCH ((DOM::emptyNamespace << 16) | 388)
+#define ATTR_FONT_STYLE ((DOM::emptyNamespace << 16) | 389)
+#define ATTR_FONT_VARIANT ((DOM::emptyNamespace << 16) | 390)
+#define ATTR_FONT_WEIGHT ((DOM::emptyNamespace << 16) | 391)
+#define ATTR_FORMAT ((DOM::emptyNamespace << 16) | 392)
+#define ATTR_FROM ((DOM::emptyNamespace << 16) | 393)
+#define ATTR_FX ((DOM::emptyNamespace << 16) | 394)
+#define ATTR_FY ((DOM::emptyNamespace << 16) | 395)
+#define ATTR_G1 ((DOM::emptyNamespace << 16) | 396)
+#define ATTR_G2 ((DOM::emptyNamespace << 16) | 397)
+#define ATTR_GLYPH_NAME ((DOM::emptyNamespace << 16) | 398)
+#define ATTR_GLYPH_ORIENTATION_HORIZONTAL ((DOM::emptyNamespace << 16) | 399)
+#define ATTR_GLYPH_ORIENTATION_VERTICAL ((DOM::emptyNamespace << 16) | 400)
+#define ATTR_GRADIENTTRANSFORM ((DOM::emptyNamespace << 16) | 401)
+#define ATTR_GRADIENTUNITS ((DOM::emptyNamespace << 16) | 402)
+#define ATTR_HANGING ((DOM::emptyNamespace << 16) | 403)
+#define ATTR_HORIZ_ADV_X ((DOM::emptyNamespace << 16) | 404)
+#define ATTR_HORIZ_ORIGIN_X ((DOM::emptyNamespace << 16) | 405)
+#define ATTR_HORIZ_ORIGIN_Y ((DOM::emptyNamespace << 16) | 406)
+#define ATTR_IDEOGRAPHIC ((DOM::emptyNamespace << 16) | 407)
+#define ATTR_IMAGE_RENDERING ((DOM::emptyNamespace << 16) | 408)
+#define ATTR_IN ((DOM::emptyNamespace << 16) | 409)
+#define ATTR_IN2 ((DOM::emptyNamespace << 16) | 410)
+#define ATTR_INTERCEPT ((DOM::emptyNamespace << 16) | 411)
+#define ATTR_K ((DOM::emptyNamespace << 16) | 412)
+#define ATTR_K1 ((DOM::emptyNamespace << 16) | 413)
+#define ATTR_K2 ((DOM::emptyNamespace << 16) | 414)
+#define ATTR_K3 ((DOM::emptyNamespace << 16) | 415)
+#define ATTR_K4 ((DOM::emptyNamespace << 16) | 416)
+#define ATTR_KERNELMATRIX ((DOM::emptyNamespace << 16) | 417)
+#define ATTR_KERNELUNITLENGTH ((DOM::emptyNamespace << 16) | 418)
+#define ATTR_KERNING ((DOM::emptyNamespace << 16) | 419)
+#define ATTR_KEYPOINTS ((DOM::emptyNamespace << 16) | 420)
+#define ATTR_KEYSPLINES ((DOM::emptyNamespace << 16) | 421)
+#define ATTR_KEYTIMES ((DOM::emptyNamespace << 16) | 422)
+#define ATTR_LENGTHADJUST ((DOM::emptyNamespace << 16) | 423)
+#define ATTR_LETTER_SPACING ((DOM::emptyNamespace << 16) | 424)
+#define ATTR_LIGHTING_COLOR ((DOM::emptyNamespace << 16) | 425)
+#define ATTR_LIMITINGCONEANGLE ((DOM::emptyNamespace << 16) | 426)
+#define ATTR_LOCAL ((DOM::emptyNamespace << 16) | 427)
+#define ATTR_MARKER_END ((DOM::emptyNamespace << 16) | 428)
+#define ATTR_MARKER_MID ((DOM::emptyNamespace << 16) | 429)
+#define ATTR_MARKER_START ((DOM::emptyNamespace << 16) | 430)
+#define ATTR_MARKERHEIGHT ((DOM::emptyNamespace << 16) | 431)
+#define ATTR_MARKERUNITS ((DOM::emptyNamespace << 16) | 432)
+#define ATTR_MARKERWIDTH ((DOM::emptyNamespace << 16) | 433)
+#define ATTR_MASKCONTENTUNITS ((DOM::emptyNamespace << 16) | 434)
+#define ATTR_MASKUNITS ((DOM::emptyNamespace << 16) | 435)
+#define ATTR_MATHEMATICAL ((DOM::emptyNamespace << 16) | 436)
+#define ATTR_MAX ((DOM::emptyNamespace << 16) | 437)
+#define ATTR_MIN ((DOM::emptyNamespace << 16) | 438)
+#define ATTR_MODE ((DOM::emptyNamespace << 16) | 439)
+#define ATTR_NUMOCTAVES ((DOM::emptyNamespace << 16) | 440)
+#define ATTR_OFFSET ((DOM::emptyNamespace << 16) | 441)
+#define ATTR_ONACTIVATE ((DOM::emptyNamespace << 16) | 442)
+#define ATTR_ONBEGIN ((DOM::emptyNamespace << 16) | 443)
+#define ATTR_ONEND ((DOM::emptyNamespace << 16) | 444)
+#define ATTR_ONFOCUSIN ((DOM::emptyNamespace << 16) | 445)
+#define ATTR_ONFOCUSOUT ((DOM::emptyNamespace << 16) | 446)
+#define ATTR_ONREPEAT ((DOM::emptyNamespace << 16) | 447)
+#define ATTR_ONZOOM ((DOM::emptyNamespace << 16) | 448)
+#define ATTR_OPACITY ((DOM::emptyNamespace << 16) | 449)
+#define ATTR_OPERATOR ((DOM::emptyNamespace << 16) | 450)
+#define ATTR_ORDER ((DOM::emptyNamespace << 16) | 451)
+#define ATTR_ORIENT ((DOM::emptyNamespace << 16) | 452)
+#define ATTR_ORIENTATION ((DOM::emptyNamespace << 16) | 453)
+#define ATTR_ORIGIN ((DOM::emptyNamespace << 16) | 454)
+#define ATTR_OVERFLOW ((DOM::emptyNamespace << 16) | 455)
+#define ATTR_OVERLINE_POSITION ((DOM::emptyNamespace << 16) | 456)
+#define ATTR_OVERLINE_THICKNESS ((DOM::emptyNamespace << 16) | 457)
+#define ATTR_PANOSE_1 ((DOM::emptyNamespace << 16) | 458)
+#define ATTR_PATHLENGTH ((DOM::emptyNamespace << 16) | 459)
+#define ATTR_PATTERNCONTENTUNITS ((DOM::emptyNamespace << 16) | 460)
+#define ATTR_PATTERNTRANSFORM ((DOM::emptyNamespace << 16) | 461)
+#define ATTR_PATTERNUNITS ((DOM::emptyNamespace << 16) | 462)
+#define ATTR_POINTER_EVENTS ((DOM::emptyNamespace << 16) | 463)
+#define ATTR_POINTS ((DOM::emptyNamespace << 16) | 464)
+#define ATTR_POINTSATX ((DOM::emptyNamespace << 16) | 465)
+#define ATTR_POINTSATY ((DOM::emptyNamespace << 16) | 466)
+#define ATTR_POINTSATZ ((DOM::emptyNamespace << 16) | 467)
+#define ATTR_PRESERVEALPHA ((DOM::emptyNamespace << 16) | 468)
+#define ATTR_PRESERVEASPECTRATIO ((DOM::emptyNamespace << 16) | 469)
+#define ATTR_PRIMITIVEUNITS ((DOM::emptyNamespace << 16) | 470)
+#define ATTR_R ((DOM::emptyNamespace << 16) | 471)
+#define ATTR_RADIUS ((DOM::emptyNamespace << 16) | 472)
+#define ATTR_REFX ((DOM::emptyNamespace << 16) | 473)
+#define ATTR_REFY ((DOM::emptyNamespace << 16) | 474)
+#define ATTR_RENDERING_INTENT ((DOM::emptyNamespace << 16) | 475)
+#define ATTR_REPEATCOUNT ((DOM::emptyNamespace << 16) | 476)
+#define ATTR_REPEATDUR ((DOM::emptyNamespace << 16) | 477)
+#define ATTR_REQUIREDEXTENSIONS ((DOM::emptyNamespace << 16) | 478)
+#define ATTR_REQUIREDFEATURES ((DOM::emptyNamespace << 16) | 479)
+#define ATTR_RESTART ((DOM::emptyNamespace << 16) | 480)
+#define ATTR_RESULT ((DOM::emptyNamespace << 16) | 481)
+#define ATTR_ROTATE ((DOM::emptyNamespace << 16) | 482)
+#define ATTR_RX ((DOM::emptyNamespace << 16) | 483)
+#define ATTR_RY ((DOM::emptyNamespace << 16) | 484)
+#define ATTR_SCALE ((DOM::emptyNamespace << 16) | 485)
+#define ATTR_SEED ((DOM::emptyNamespace << 16) | 486)
+#define ATTR_SHAPE_RENDERING ((DOM::emptyNamespace << 16) | 487)
+#define ATTR_SLOPE ((DOM::emptyNamespace << 16) | 488)
+#define ATTR_SPACING ((DOM::emptyNamespace << 16) | 489)
+#define ATTR_SPECULARCONSTANT ((DOM::emptyNamespace << 16) | 490)
+#define ATTR_SPECULAREXPONENT ((DOM::emptyNamespace << 16) | 491)
+#define ATTR_SPREADMETHOD ((DOM::emptyNamespace << 16) | 492)
+#define ATTR_STARTOFFSET ((DOM::emptyNamespace << 16) | 493)
+#define ATTR_STDDEVIATION ((DOM::emptyNamespace << 16) | 494)
+#define ATTR_STEMH ((DOM::emptyNamespace << 16) | 495)
+#define ATTR_STEMV ((DOM::emptyNamespace << 16) | 496)
+#define ATTR_STITCHTILES ((DOM::emptyNamespace << 16) | 497)
+#define ATTR_STOP_COLOR ((DOM::emptyNamespace << 16) | 498)
+#define ATTR_STOP_OPACITY ((DOM::emptyNamespace << 16) | 499)
+#define ATTR_STRIKETHROUGH_POSITION ((DOM::emptyNamespace << 16) | 500)
+#define ATTR_STRIKETHROUGH_THICKNESS ((DOM::emptyNamespace << 16) | 501)
+#define ATTR_STROKE ((DOM::emptyNamespace << 16) | 502)
+#define ATTR_STROKE_DASHARRAY ((DOM::emptyNamespace << 16) | 503)
+#define ATTR_STROKE_DASHOFFSET ((DOM::emptyNamespace << 16) | 504)
+#define ATTR_STROKE_LINECAP ((DOM::emptyNamespace << 16) | 505)
+#define ATTR_STROKE_LINEJOIN ((DOM::emptyNamespace << 16) | 506)
+#define ATTR_STROKE_MITERLIMIT ((DOM::emptyNamespace << 16) | 507)
+#define ATTR_STROKE_OPACITY ((DOM::emptyNamespace << 16) | 508)
+#define ATTR_STROKE_WIDTH ((DOM::emptyNamespace << 16) | 509)
+#define ATTR_SURFACESCALE ((DOM::emptyNamespace << 16) | 510)
+#define ATTR_SYSTEMLANGUAGE ((DOM::emptyNamespace << 16) | 511)
+#define ATTR_TABLEVALUES ((DOM::emptyNamespace << 16) | 512)
+#define ATTR_TARGETX ((DOM::emptyNamespace << 16) | 513)
+#define ATTR_TARGETY ((DOM::emptyNamespace << 16) | 514)
+#define ATTR_TEXT_ANCHOR ((DOM::emptyNamespace << 16) | 515)
+#define ATTR_TEXT_DECORATION ((DOM::emptyNamespace << 16) | 516)
+#define ATTR_TEXT_RENDERING ((DOM::emptyNamespace << 16) | 517)
+#define ATTR_TEXTLENGTH ((DOM::emptyNamespace << 16) | 518)
+#define ATTR_TO ((DOM::emptyNamespace << 16) | 519)
+#define ATTR_TRANSFORM ((DOM::emptyNamespace << 16) | 520)
+#define ATTR_U1 ((DOM::emptyNamespace << 16) | 521)
+#define ATTR_U2 ((DOM::emptyNamespace << 16) | 522)
+#define ATTR_UNDERLINE_POSITION ((DOM::emptyNamespace << 16) | 523)
+#define ATTR_UNDERLINE_THICKNESS ((DOM::emptyNamespace << 16) | 524)
+#define ATTR_UNICODE ((DOM::emptyNamespace << 16) | 525)
+#define ATTR_UNICODE_BIDI ((DOM::emptyNamespace << 16) | 526)
+#define ATTR_UNICODE_RANGE ((DOM::emptyNamespace << 16) | 527)
+#define ATTR_UNITS_PER_EM ((DOM::emptyNamespace << 16) | 528)
+#define ATTR_V_ALPHABETIC ((DOM::emptyNamespace << 16) | 529)
+#define ATTR_V_HANGING ((DOM::emptyNamespace << 16) | 530)
+#define ATTR_V_IDEOGRAPHIC ((DOM::emptyNamespace << 16) | 531)
+#define ATTR_V_MATHEMATICAL ((DOM::emptyNamespace << 16) | 532)
+#define ATTR_VALUES ((DOM::emptyNamespace << 16) | 533)
+#define ATTR_VERT_ADV_Y ((DOM::emptyNamespace << 16) | 534)
+#define ATTR_VERT_ORIGIN_X ((DOM::emptyNamespace << 16) | 535)
+#define ATTR_VERT_ORIGIN_Y ((DOM::emptyNamespace << 16) | 536)
+#define ATTR_VIEWBOX ((DOM::emptyNamespace << 16) | 537)
+#define ATTR_VIEWTARGET ((DOM::emptyNamespace << 16) | 538)
+#define ATTR_WIDTHS ((DOM::emptyNamespace << 16) | 539)
+#define ATTR_WORD_SPACING ((DOM::emptyNamespace << 16) | 540)
+#define ATTR_WRITING_MODE ((DOM::emptyNamespace << 16) | 541)
+#define ATTR_X ((DOM::emptyNamespace << 16) | 542)
+#define ATTR_X_HEIGHT ((DOM::emptyNamespace << 16) | 543)
+#define ATTR_X1 ((DOM::emptyNamespace << 16) | 544)
+#define ATTR_X2 ((DOM::emptyNamespace << 16) | 545)
+#define ATTR_XCHANNELSELECTOR ((DOM::emptyNamespace << 16) | 546)
+#define ATTR_Y ((DOM::emptyNamespace << 16) | 547)
+#define ATTR_Y1 ((DOM::emptyNamespace << 16) | 548)
+#define ATTR_Y2 ((DOM::emptyNamespace << 16) | 549)
+#define ATTR_YCHANNELSELECTOR ((DOM::emptyNamespace << 16) | 550)
+#define ATTR_Z ((DOM::emptyNamespace << 16) | 551)
+#define ATTR_ZOOMANDPAN ((DOM::emptyNamespace << 16) | 552)
+#define ATTR_XLINK_ACTUATE ((DOM::xlinkNamespace << 16) | 553)
+#define ATTR_XLINK_ARCROLE ((DOM::xlinkNamespace << 16) | 554)
+#define ATTR_XLINK_ROLE ((DOM::xlinkNamespace << 16) | 555)
+#define ATTR_XLINK_SHOW ((DOM::xlinkNamespace << 16) | 556)
+#define ATTR_XML_SPACE ((DOM::xmlNamespace << 16) | 557)
 #define ID_LAST_TAG 110
 #define ID_CLOSE_TAG 16384
-#define ATTR_LAST_ATTR 253
-#define ATTR_LAST_CI_ATTR 210
+#define ATTR_LAST_ATTR 256
+#define ATTR_LAST_CI_ATTR 213
 
 #define caseSensitiveAttr(id) (((localNamePart(id)) > ATTR_LAST_CI_ATTR || (id) == ATTR_ABBR || (id) == ATTR_CITE || (id) == ATTR_CODE || (id) == ATTR_LABEL || (id) == ATTR_OBJECT || (id) == ATTR_TITLE))
 
Index: misc/htmlattrs.in
===================================================================
--- misc/htmlattrs.in	(revision 1132763)
+++ misc/htmlattrs.in	(working copy)
@@ -34,6 +34,8 @@
 direction
 disabled
 enctype
+encryption
+encryption-key
 face
 frame
 frameborder
@@ -84,6 +86,7 @@
 scrolling
 selected
 shape
+signing-key
 size
 span
 start
Index: misc/htmlattrs.c
===================================================================
--- misc/htmlattrs.c	(revision 1132763)
+++ misc/htmlattrs.c	(working copy)
@@ -1,4 +1,4 @@
-/* ANSI-C code produced by gperf version 3.0.3 */
+/* ANSI-C code produced by gperf version 3.0.4 */
 /* Command-line: gperf -c -a -L ANSI-C -P -G -D -E -C -o -t -k '*' -NfindAttr -Hhash_attr -Wwordlist_attr -Qspool_attr -s 2 htmlattrs.gperf  */
 
 #if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
@@ -40,14 +40,14 @@
 };
 enum
   {
-    TOTAL_KEYWORDS = 159,
+    TOTAL_KEYWORDS = 158,
     MIN_WORD_LENGTH = 2,
     MAX_WORD_LENGTH = 15,
     MIN_HASH_VALUE = 3,
-    MAX_HASH_VALUE = 635
+    MAX_HASH_VALUE = 641
   };
 
-/* maximum key range = 633, duplicates = 0 */
+/* maximum key range = 639, duplicates = 0 */
 
 #ifdef __GNUC__
 __inline
@@ -61,32 +61,32 @@
 {
   static const unsigned short asso_values[] =
     {
-      636, 636, 636, 636, 636, 636, 636, 636, 636, 636,
-      636, 636, 636, 636, 636, 636, 636, 636, 636, 636,
-      636, 636, 636, 636, 636, 636, 636, 636, 636, 636,
-      636, 636, 636, 636, 636, 636, 636, 636, 636, 636,
-      636, 636, 636, 636, 636,  30,   5, 636, 636, 636,
-      636, 636, 636, 636, 636, 636, 636, 636, 636, 636,
-      636, 636, 636, 636, 636, 636, 636, 636, 636, 636,
-      636, 636, 636, 636, 636, 636, 636, 636, 636, 636,
-      636, 636, 636, 636, 636, 636, 636, 636, 636, 636,
-      636, 636, 636, 636, 636, 636, 636,  10,  30,   0,
-       10,   5,  10,  15,  35,  65, 130, 105,   5,  40,
-       80,   5,   0,   0,   0,   0,   5,  25, 135, 110,
-       50, 125,  15, 636, 636, 636, 636, 636, 636, 636,
-      636, 636, 636, 636, 636, 636, 636, 636, 636, 636,
-      636, 636, 636, 636, 636, 636, 636, 636, 636, 636,
-      636, 636, 636, 636, 636, 636, 636, 636, 636, 636,
-      636, 636, 636, 636, 636, 636, 636, 636, 636, 636,
-      636, 636, 636, 636, 636, 636, 636, 636, 636, 636,
-      636, 636, 636, 636, 636, 636, 636, 636, 636, 636,
-      636, 636, 636, 636, 636, 636, 636, 636, 636, 636,
-      636, 636, 636, 636, 636, 636, 636, 636, 636, 636,
-      636, 636, 636, 636, 636, 636, 636, 636, 636, 636,
-      636, 636, 636, 636, 636, 636, 636, 636, 636, 636,
-      636, 636, 636, 636, 636, 636, 636, 636, 636, 636,
-      636, 636, 636, 636, 636, 636, 636, 636, 636, 636,
-      636, 636, 636, 636, 636, 636, 636
+      642, 642, 642, 642, 642, 642, 642, 642, 642, 642,
+      642, 642, 642, 642, 642, 642, 642, 642, 642, 642,
+      642, 642, 642, 642, 642, 642, 642, 642, 642, 642,
+      642, 642, 642, 642, 642, 642, 642, 642, 642, 642,
+      642, 642, 642, 642, 642,   0,   0, 642, 642, 642,
+      642, 642, 642, 642, 642, 642, 642, 642, 642, 642,
+      642, 642, 642, 642, 642, 642, 642, 642, 642, 642,
+      642, 642, 642, 642, 642, 642, 642, 642, 642, 642,
+      642, 642, 642, 642, 642, 642, 642, 642, 642, 642,
+      642, 642, 642, 642, 642, 642, 642,  35,  10,   0,
+        5,   5,  20,  50,  90,  50, 155, 130,   0,  25,
+       65,   0,   5,   0,   0,   0,   0,  35, 135, 115,
+       50,  60,  45, 642, 642, 642, 642, 642, 642, 642,
+      642, 642, 642, 642, 642, 642, 642, 642, 642, 642,
+      642, 642, 642, 642, 642, 642, 642, 642, 642, 642,
+      642, 642, 642, 642, 642, 642, 642, 642, 642, 642,
+      642, 642, 642, 642, 642, 642, 642, 642, 642, 642,
+      642, 642, 642, 642, 642, 642, 642, 642, 642, 642,
+      642, 642, 642, 642, 642, 642, 642, 642, 642, 642,
+      642, 642, 642, 642, 642, 642, 642, 642, 642, 642,
+      642, 642, 642, 642, 642, 642, 642, 642, 642, 642,
+      642, 642, 642, 642, 642, 642, 642, 642, 642, 642,
+      642, 642, 642, 642, 642, 642, 642, 642, 642, 642,
+      642, 642, 642, 642, 642, 642, 642, 642, 642, 642,
+      642, 642, 642, 642, 642, 642, 642, 642, 642, 642,
+      642, 642, 642, 642, 642, 642, 642
     };
   register int hval = len;
 
@@ -144,703 +144,702 @@
 struct spool_attr_t
   {
     char spool_attr_str0[sizeof("src")];
-    char spool_attr_str1[sizeof("top")];
+    char spool_attr_str1[sizeof("onscroll")];
     char spool_attr_str2[sizeof("cols")];
-    char spool_attr_str3[sizeof("for")];
-    char spool_attr_str4[sizeof("loop")];
-    char spool_attr_str5[sizeof("color")];
-    char spool_attr_str6[sizeof("poster")];
-    char spool_attr_str7[sizeof("rel")];
-    char spool_attr_str8[sizeof("code")];
-    char spool_attr_str9[sizeof("coords")];
-    char spool_attr_str10[sizeof("end")];
+    char spool_attr_str3[sizeof("color")];
+    char spool_attr_str4[sizeof("onerror")];
+    char spool_attr_str5[sizeof("top")];
+    char spool_attr_str6[sizeof("loop")];
+    char spool_attr_str7[sizeof("coords")];
+    char spool_attr_str8[sizeof("onreset")];
+    char spool_attr_str9[sizeof("onselect")];
+    char spool_attr_str10[sizeof("code")];
     char spool_attr_str11[sizeof("scope")];
-    char spool_attr_str12[sizeof("onerror")];
-    char spool_attr_str13[sizeof("type")];
-    char spool_attr_str14[sizeof("onreset")];
-    char spool_attr_str15[sizeof("onscroll")];
-    char spool_attr_str16[sizeof("left")];
-    char spool_attr_str17[sizeof("accept")];
-    char spool_attr_str18[sizeof("onselect")];
-    char spool_attr_str19[sizeof("loopstart")];
-    char spool_attr_str20[sizeof("defer")];
-    char spool_attr_str21[sizeof("abbr")];
-    char spool_attr_str22[sizeof("start")];
-    char spool_attr_str23[sizeof("onload")];
-    char spool_attr_str24[sizeof("declare")];
-    char spool_attr_str25[sizeof("selected")];
-    char spool_attr_str26[sizeof("face")];
-    char spool_attr_str27[sizeof("border")];
-    char spool_attr_str28[sizeof("href")];
-    char spool_attr_str29[sizeof("class")];
-    char spool_attr_str30[sizeof("prompt")];
+    char spool_attr_str12[sizeof("poster")];
+    char spool_attr_str13[sizeof("rel")];
+    char spool_attr_str14[sizeof("for")];
+    char spool_attr_str15[sizeof("label")];
+    char spool_attr_str16[sizeof("border")];
+    char spool_attr_str17[sizeof("bordercolor")];
+    char spool_attr_str18[sizeof("face")];
+    char spool_attr_str19[sizeof("prompt")];
+    char spool_attr_str20[sizeof("selected")];
+    char spool_attr_str21[sizeof("left")];
+    char spool_attr_str22[sizeof("onload")];
+    char spool_attr_str23[sizeof("abbr")];
+    char spool_attr_str24[sizeof("onblur")];
+    char spool_attr_str25[sizeof("onabort")];
+    char spool_attr_str26[sizeof("data")];
+    char spool_attr_str27[sizeof("defer")];
+    char spool_attr_str28[sizeof("accept")];
+    char spool_attr_str29[sizeof("id")];
+    char spool_attr_str30[sizeof("type")];
     char spool_attr_str31[sizeof("onfocus")];
     char spool_attr_str32[sizeof("alt")];
-    char spool_attr_str33[sizeof("data")];
-    char spool_attr_str34[sizeof("clear")];
-    char spool_attr_str35[sizeof("hspace")];
-    char spool_attr_str36[sizeof("compact")];
-    char spool_attr_str37[sizeof("truespeed")];
-    char spool_attr_str38[sizeof("target")];
-    char spool_attr_str39[sizeof("onabort")];
-    char spool_attr_str40[sizeof("codebase")];
-    char spool_attr_str41[sizeof("frame")];
-    char spool_attr_str42[sizeof("bordercolor")];
-    char spool_attr_str43[sizeof("id")];
-    char spool_attr_str44[sizeof("text")];
-    char spool_attr_str45[sizeof("onblur")];
-    char spool_attr_str46[sizeof("headers")];
-    char spool_attr_str47[sizeof("char")];
-    char spool_attr_str48[sizeof("label")];
+    char spool_attr_str33[sizeof("class")];
+    char spool_attr_str34[sizeof("truespeed")];
+    char spool_attr_str35[sizeof("clear")];
+    char spool_attr_str36[sizeof("target")];
+    char spool_attr_str37[sizeof("declare")];
+    char spool_attr_str38[sizeof("codebase")];
+    char spool_attr_str39[sizeof("text")];
+    char spool_attr_str40[sizeof("start")];
+    char spool_attr_str41[sizeof("compact")];
+    char spool_attr_str42[sizeof("controls")];
+    char spool_attr_str43[sizeof("enctype")];
+    char spool_attr_str44[sizeof("profile")];
+    char spool_attr_str45[sizeof("char")];
+    char spool_attr_str46[sizeof("frame")];
+    char spool_attr_str47[sizeof("codetype")];
+    char spool_attr_str48[sizeof("charset")];
     char spool_attr_str49[sizeof("shape")];
-    char spool_attr_str50[sizeof("bgcolor")];
-    char spool_attr_str51[sizeof("usemap")];
-    char spool_attr_str52[sizeof("charset")];
-    char spool_attr_str53[sizeof("span")];
-    char spool_attr_str54[sizeof("profile")];
-    char spool_attr_str55[sizeof("scheme")];
-    char spool_attr_str56[sizeof("colspan")];
-    char spool_attr_str57[sizeof("controls")];
-    char spool_attr_str58[sizeof("pagex")];
-    char spool_attr_str59[sizeof("charoff")];
-    char spool_attr_str60[sizeof("onresize")];
-    char spool_attr_str61[sizeof("html")];
-    char spool_attr_str62[sizeof("method")];
-    char spool_attr_str63[sizeof("loopend")];
-    char spool_attr_str64[sizeof("rows")];
-    char spool_attr_str65[sizeof("onmouseup")];
-    char spool_attr_str66[sizeof("longdesc")];
-    char spool_attr_str67[sizeof("wrap")];
-    char spool_attr_str68[sizeof("ismap")];
-    char spool_attr_str69[sizeof("frameborder")];
-    char spool_attr_str70[sizeof("oversrc")];
-    char spool_attr_str71[sizeof("accept-charset")];
-    char spool_attr_str72[sizeof("onmouseout")];
-    char spool_attr_str73[sizeof("classid")];
-    char spool_attr_str74[sizeof("lang")];
-    char spool_attr_str75[sizeof("nohref")];
-    char spool_attr_str76[sizeof("media")];
-    char spool_attr_str77[sizeof("dir")];
-    char spool_attr_str78[sizeof("cite")];
-    char spool_attr_str79[sizeof("noshade")];
-    char spool_attr_str80[sizeof("rev")];
-    char spool_attr_str81[sizeof("rules")];
-    char spool_attr_str82[sizeof("object")];
-    char spool_attr_str83[sizeof("enctype")];
-    char spool_attr_str84[sizeof("onunload")];
-    char spool_attr_str85[sizeof("size")];
-    char spool_attr_str86[sizeof("title")];
-    char spool_attr_str87[sizeof("codetype")];
-    char spool_attr_str88[sizeof("name")];
-    char spool_attr_str89[sizeof("vspace")];
-    char spool_attr_str90[sizeof("bgproperties")];
-    char spool_attr_str91[sizeof("onchange")];
-    char spool_attr_str92[sizeof("style")];
-    char spool_attr_str93[sizeof("hreflang")];
-    char spool_attr_str94[sizeof("height")];
-    char spool_attr_str95[sizeof("datetime")];
-    char spool_attr_str96[sizeof("noresize")];
-    char spool_attr_str97[sizeof("pagey")];
-    char spool_attr_str98[sizeof("action")];
-    char spool_attr_str99[sizeof("content")];
-    char spool_attr_str100[sizeof("onsubmit")];
-    char spool_attr_str101[sizeof("scrolldelay")];
-    char spool_attr_str102[sizeof("onclick")];
-    char spool_attr_str103[sizeof("language")];
-    char spool_attr_str104[sizeof("scrolling")];
-    char spool_attr_str105[sizeof("checked")];
-    char spool_attr_str106[sizeof("challenge")];
-    char spool_attr_str107[sizeof("plain")];
-    char spool_attr_str108[sizeof("cellspacing")];
-    char spool_attr_str109[sizeof("scrollamount")];
-    char spool_attr_str110[sizeof("axis")];
-    char spool_attr_str111[sizeof("value")];
-    char spool_attr_str112[sizeof("nowrap")];
-    char spool_attr_str113[sizeof("rowspan")];
-    char spool_attr_str114[sizeof("disabled")];
+    char spool_attr_str50[sizeof("span")];
+    char spool_attr_str51[sizeof("style")];
+    char spool_attr_str52[sizeof("bgcolor")];
+    char spool_attr_str53[sizeof("datetime")];
+    char spool_attr_str54[sizeof("name")];
+    char spool_attr_str55[sizeof("onmouseout")];
+    char spool_attr_str56[sizeof("usemap")];
+    char spool_attr_str57[sizeof("onresize")];
+    char spool_attr_str58[sizeof("onmouseup")];
+    char spool_attr_str59[sizeof("frameborder")];
+    char spool_attr_str60[sizeof("colspan")];
+    char spool_attr_str61[sizeof("href")];
+    char spool_attr_str62[sizeof("ismap")];
+    char spool_attr_str63[sizeof("scrolldelay")];
+    char spool_attr_str64[sizeof("classid")];
+    char spool_attr_str65[sizeof("rows")];
+    char spool_attr_str66[sizeof("pagex")];
+    char spool_attr_str67[sizeof("oversrc")];
+    char spool_attr_str68[sizeof("onsubmit")];
+    char spool_attr_str69[sizeof("lang")];
+    char spool_attr_str70[sizeof("charoff")];
+    char spool_attr_str71[sizeof("pagey")];
+    char spool_attr_str72[sizeof("scheme")];
+    char spool_attr_str73[sizeof("longdesc")];
+    char spool_attr_str74[sizeof("media")];
+    char spool_attr_str75[sizeof("hspace")];
+    char spool_attr_str76[sizeof("rules")];
+    char spool_attr_str77[sizeof("method")];
+    char spool_attr_str78[sizeof("content")];
+    char spool_attr_str79[sizeof("onunload")];
+    char spool_attr_str80[sizeof("axis")];
+    char spool_attr_str81[sizeof("html")];
+    char spool_attr_str82[sizeof("rev")];
+    char spool_attr_str83[sizeof("wrap")];
+    char spool_attr_str84[sizeof("action")];
+    char spool_attr_str85[sizeof("headers")];
+    char spool_attr_str86[sizeof("dir")];
+    char spool_attr_str87[sizeof("cite")];
+    char spool_attr_str88[sizeof("title")];
+    char spool_attr_str89[sizeof("object")];
+    char spool_attr_str90[sizeof("scrollamount")];
+    char spool_attr_str91[sizeof("scrolling")];
+    char spool_attr_str92[sizeof("bgproperties")];
+    char spool_attr_str93[sizeof("noresize")];
+    char spool_attr_str94[sizeof("plain")];
+    char spool_attr_str95[sizeof("vspace")];
+    char spool_attr_str96[sizeof("onclick")];
+    char spool_attr_str97[sizeof("value")];
+    char spool_attr_str98[sizeof("nohref")];
+    char spool_attr_str99[sizeof("readonly")];
+    char spool_attr_str100[sizeof("accept-charset")];
+    char spool_attr_str101[sizeof("encryption")];
+    char spool_attr_str102[sizeof("checked")];
+    char spool_attr_str103[sizeof("tabindex")];
+    char spool_attr_str104[sizeof("ondblclick")];
+    char spool_attr_str105[sizeof("size")];
+    char spool_attr_str106[sizeof("noshade")];
+    char spool_attr_str107[sizeof("onkeypress")];
+    char spool_attr_str108[sizeof("onmouseover")];
+    char spool_attr_str109[sizeof("standby")];
+    char spool_attr_str110[sizeof("challenge")];
+    char spool_attr_str111[sizeof("autocomplete")];
+    char spool_attr_str112[sizeof("disabled")];
+    char spool_attr_str113[sizeof("z-index")];
+    char spool_attr_str114[sizeof("multiple")];
     char spool_attr_str115[sizeof("align")];
-    char spool_attr_str116[sizeof("cellpadding")];
-    char spool_attr_str117[sizeof("topmargin")];
-    char spool_attr_str118[sizeof("autocomplete")];
-    char spool_attr_str119[sizeof("nosave")];
-    char spool_attr_str120[sizeof("z-index")];
-    char spool_attr_str121[sizeof("ondblclick")];
-    char spool_attr_str122[sizeof("onmouseover")];
-    char spool_attr_str123[sizeof("leftmargin")];
-    char spool_attr_str124[sizeof("readonly")];
-    char spool_attr_str125[sizeof("archive")];
-    char spool_attr_str126[sizeof("onkeypress")];
-    char spool_attr_str127[sizeof("pluginurl")];
-    char spool_attr_str128[sizeof("pluginpage")];
-    char spool_attr_str129[sizeof("pluginspage")];
-    char spool_attr_str130[sizeof("multiple")];
-    char spool_attr_str131[sizeof("accesskey")];
-    char spool_attr_str132[sizeof("maxlength")];
-    char spool_attr_str133[sizeof("hidden")];
-    char spool_attr_str134[sizeof("onkeyup")];
-    char spool_attr_str135[sizeof("onmousemove")];
-    char spool_attr_str136[sizeof("tabindex")];
-    char spool_attr_str137[sizeof("standby")];
-    char spool_attr_str138[sizeof("width")];
-    char spool_attr_str139[sizeof("behavior")];
-    char spool_attr_str140[sizeof("playcount")];
-    char spool_attr_str141[sizeof("onmousedown")];
-    char spool_attr_str142[sizeof("version")];
-    char spool_attr_str143[sizeof("autoplay")];
-    char spool_attr_str144[sizeof("alink")];
-    char spool_attr_str145[sizeof("direction")];
-    char spool_attr_str146[sizeof("background")];
+    char spool_attr_str116[sizeof("nowrap")];
+    char spool_attr_str117[sizeof("rowspan")];
+    char spool_attr_str118[sizeof("cellspacing")];
+    char spool_attr_str119[sizeof("onmousemove")];
+    char spool_attr_str120[sizeof("onkeyup")];
+    char spool_attr_str121[sizeof("topmargin")];
+    char spool_attr_str122[sizeof("cellpadding")];
+    char spool_attr_str123[sizeof("accesskey")];
+    char spool_attr_str124[sizeof("nosave")];
+    char spool_attr_str125[sizeof("onchange")];
+    char spool_attr_str126[sizeof("language")];
+    char spool_attr_str127[sizeof("onmousedown")];
+    char spool_attr_str128[sizeof("valuetype")];
+    char spool_attr_str129[sizeof("contenteditable")];
+    char spool_attr_str130[sizeof("hreflang")];
+    char spool_attr_str131[sizeof("pluginurl")];
+    char spool_attr_str132[sizeof("leftmargin")];
+    char spool_attr_str133[sizeof("version")];
+    char spool_attr_str134[sizeof("autoplay")];
+    char spool_attr_str135[sizeof("summary")];
+    char spool_attr_str136[sizeof("direction")];
+    char spool_attr_str137[sizeof("maxlength")];
+    char spool_attr_str138[sizeof("height")];
+    char spool_attr_str139[sizeof("alink")];
+    char spool_attr_str140[sizeof("background")];
+    char spool_attr_str141[sizeof("valign")];
+    char spool_attr_str142[sizeof("archive")];
+    char spool_attr_str143[sizeof("hidden")];
+    char spool_attr_str144[sizeof("pluginpage")];
+    char spool_attr_str145[sizeof("pluginspage")];
+    char spool_attr_str146[sizeof("behavior")];
     char spool_attr_str147[sizeof("link")];
-    char spool_attr_str148[sizeof("contenteditable")];
-    char spool_attr_str149[sizeof("http-equiv")];
-    char spool_attr_str150[sizeof("valign")];
-    char spool_attr_str151[sizeof("valuetype")];
-    char spool_attr_str152[sizeof("summary")];
-    char spool_attr_str153[sizeof("marginheight")];
-    char spool_attr_str154[sizeof("unknown")];
-    char spool_attr_str155[sizeof("vlink")];
-    char spool_attr_str156[sizeof("onkeydown")];
-    char spool_attr_str157[sizeof("marginwidth")];
-    char spool_attr_str158[sizeof("visibility")];
+    char spool_attr_str148[sizeof("http-equiv")];
+    char spool_attr_str149[sizeof("width")];
+    char spool_attr_str150[sizeof("onkeydown")];
+    char spool_attr_str151[sizeof("encryption-key")];
+    char spool_attr_str152[sizeof("vlink")];
+    char spool_attr_str153[sizeof("unknown")];
+    char spool_attr_str154[sizeof("marginwidth")];
+    char spool_attr_str155[sizeof("marginheight")];
+    char spool_attr_str156[sizeof("visibility")];
+    char spool_attr_str157[sizeof("signing-key")];
   };
 static const struct spool_attr_t spool_attr_contents =
   {
     "src",
-    "top",
+    "onscroll",
     "cols",
-    "for",
-    "loop",
     "color",
-    "poster",
-    "rel",
-    "code",
-    "coords",
-    "end",
-    "scope",
     "onerror",
-    "type",
+    "top",
+    "loop",
+    "coords",
     "onreset",
-    "onscroll",
-    "left",
-    "accept",
     "onselect",
-    "loopstart",
-    "defer",
-    "abbr",
-    "start",
-    "onload",
-    "declare",
-    "selected",
-    "face",
+    "code",
+    "scope",
+    "poster",
+    "rel",
+    "for",
+    "label",
     "border",
-    "href",
-    "class",
+    "bordercolor",
+    "face",
     "prompt",
+    "selected",
+    "left",
+    "onload",
+    "abbr",
+    "onblur",
+    "onabort",
+    "data",
+    "defer",
+    "accept",
+    "id",
+    "type",
     "onfocus",
     "alt",
-    "data",
-    "clear",
-    "hspace",
-    "compact",
+    "class",
     "truespeed",
+    "clear",
     "target",
-    "onabort",
+    "declare",
     "codebase",
-    "frame",
-    "bordercolor",
-    "id",
     "text",
-    "onblur",
-    "headers",
+    "start",
+    "compact",
+    "controls",
+    "enctype",
+    "profile",
     "char",
-    "label",
+    "frame",
+    "codetype",
+    "charset",
     "shape",
+    "span",
+    "style",
     "bgcolor",
+    "datetime",
+    "name",
+    "onmouseout",
     "usemap",
-    "charset",
-    "span",
-    "profile",
-    "scheme",
-    "colspan",
-    "controls",
-    "pagex",
-    "charoff",
     "onresize",
-    "html",
-    "method",
-    "loopend",
-    "rows",
     "onmouseup",
-    "longdesc",
-    "wrap",
-    "ismap",
     "frameborder",
-    "oversrc",
-    "accept-charset",
-    "onmouseout",
+    "colspan",
+    "href",
+    "ismap",
+    "scrolldelay",
     "classid",
+    "rows",
+    "pagex",
+    "oversrc",
+    "onsubmit",
     "lang",
-    "nohref",
+    "charoff",
+    "pagey",
+    "scheme",
+    "longdesc",
     "media",
-    "dir",
-    "cite",
-    "noshade",
-    "rev",
+    "hspace",
     "rules",
-    "object",
-    "enctype",
+    "method",
+    "content",
     "onunload",
-    "size",
+    "axis",
+    "html",
+    "rev",
+    "wrap",
+    "action",
+    "headers",
+    "dir",
+    "cite",
     "title",
-    "codetype",
-    "name",
-    "vspace",
+    "object",
+    "scrollamount",
+    "scrolling",
     "bgproperties",
-    "onchange",
-    "style",
-    "hreflang",
-    "height",
-    "datetime",
     "noresize",
-    "pagey",
-    "action",
-    "content",
-    "onsubmit",
-    "scrolldelay",
+    "plain",
+    "vspace",
     "onclick",
-    "language",
-    "scrolling",
+    "value",
+    "nohref",
+    "readonly",
+    "accept-charset",
+    "encryption",
     "checked",
+    "tabindex",
+    "ondblclick",
+    "size",
+    "noshade",
+    "onkeypress",
+    "onmouseover",
+    "standby",
     "challenge",
-    "plain",
-    "cellspacing",
-    "scrollamount",
-    "axis",
-    "value",
-    "nowrap",
-    "rowspan",
-    "disabled",
-    "align",
-    "cellpadding",
-    "topmargin",
     "autocomplete",
-    "nosave",
+    "disabled",
     "z-index",
-    "ondblclick",
-    "onmouseover",
-    "leftmargin",
-    "readonly",
-    "archive",
-    "onkeypress",
-    "pluginurl",
-    "pluginpage",
-    "pluginspage",
     "multiple",
-    "accesskey",
-    "maxlength",
-    "hidden",
-    "onkeyup",
+    "align",
+    "nowrap",
+    "rowspan",
+    "cellspacing",
     "onmousemove",
-    "tabindex",
-    "standby",
-    "width",
-    "behavior",
-    "playcount",
+    "onkeyup",
+    "topmargin",
+    "cellpadding",
+    "accesskey",
+    "nosave",
+    "onchange",
+    "language",
     "onmousedown",
+    "valuetype",
+    "contenteditable",
+    "hreflang",
+    "pluginurl",
+    "leftmargin",
     "version",
     "autoplay",
-    "alink",
+    "summary",
     "direction",
+    "maxlength",
+    "height",
+    "alink",
     "background",
+    "valign",
+    "archive",
+    "hidden",
+    "pluginpage",
+    "pluginspage",
+    "behavior",
     "link",
-    "contenteditable",
     "http-equiv",
-    "valign",
-    "valuetype",
-    "summary",
-    "marginheight",
-    "unknown",
-    "vlink",
+    "width",
     "onkeydown",
+    "encryption-key",
+    "vlink",
+    "unknown",
     "marginwidth",
-    "visibility"
+    "marginheight",
+    "visibility",
+    "signing-key"
   };
 #define spool_attr ((const char *) &spool_attr_contents)
 
 static const struct attrs wordlist_attr[] =
   {
-#line 164 "htmlattrs.gperf"
+#line 163 "htmlattrs.gperf"
     {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str0, ATTR_SRC},
-#line 107 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str1, ATTR_TOP},
+#line 157 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str1, ATTR_ONSCROLL},
 #line 34 "htmlattrs.gperf"
     {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str2, ATTR_COLS},
-#line 134 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str3, ATTR_FOR},
-#line 62 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str4, ATTR_LOOP},
 #line 33 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str5, ATTR_COLOR},
-#line 87 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str6, ATTR_POSTER},
-#line 89 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str7, ATTR_REL},
-#line 129 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str8, ATTR_CODE},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str3, ATTR_COLOR},
+#line 76 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str4, ATTR_ONERROR},
+#line 106 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str5, ATTR_TOP},
+#line 63 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str6, ATTR_LOOP},
 #line 39 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str9, ATTR_COORDS},
-#line 46 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str10, ATTR_END},
-#line 94 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str11, ATTR_SCOPE},
-#line 77 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str12, ATTR_ONERROR},
-#line 110 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str13, ATTR_TYPE},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str7, ATTR_COORDS},
+#line 155 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str8, ATTR_ONRESET},
 #line 156 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str14, ATTR_ONRESET},
-#line 158 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str15, ATTR_ONSCROLL},
-#line 59 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str16, ATTR_LEFT},
-#line 12 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str17, ATTR_ACCEPT},
-#line 157 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str18, ATTR_ONSELECT},
-#line 64 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str19, ATTR_LOOPSTART},
-#line 41 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str20, ATTR_DEFER},
-#line 121 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str21, ATTR_ABBR},
-#line 102 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str22, ATTR_START},
-#line 150 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str23, ATTR_ONLOAD},
-#line 40 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str24, ATTR_DECLARE},
-#line 98 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str25, ATTR_SELECTED},
-#line 47 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str26, ATTR_FACE},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str9, ATTR_ONSELECT},
+#line 128 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str10, ATTR_CODE},
+#line 92 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str11, ATTR_SCOPE},
+#line 85 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str12, ATTR_POSTER},
+#line 87 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str13, ATTR_REL},
+#line 133 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str14, ATTR_FOR},
+#line 137 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str15, ATTR_LABEL},
 #line 22 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str27, ATTR_BORDER},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str16, ATTR_BORDER},
+#line 23 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str17, ATTR_BORDERCOLOR},
+#line 48 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str18, ATTR_FACE},
+#line 161 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str19, ATTR_PROMPT},
+#line 96 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str20, ATTR_SELECTED},
+#line 60 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str21, ATTR_LEFT},
+#line 149 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str22, ATTR_ONLOAD},
+#line 120 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str23, ATTR_ABBR},
+#line 141 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str24, ATTR_ONBLUR},
+#line 75 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str25, ATTR_ONABORT},
+#line 131 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str26, ATTR_DATA},
+#line 41 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str27, ATTR_DEFER},
+#line 12 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str28, ATTR_ACCEPT},
 #line 136 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str28, ATTR_HREF},
-#line 127 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str29, ATTR_CLASS},
-#line 162 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str30, ATTR_PROMPT},
-#line 146 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str29, ATTR_ID},
+#line 109 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str30, ATTR_TYPE},
+#line 145 "htmlattrs.gperf"
     {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str31, ATTR_ONFOCUS},
-#line 123 "htmlattrs.gperf"
+#line 122 "htmlattrs.gperf"
     {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str32, ATTR_ALT},
-#line 132 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str33, ATTR_DATA},
+#line 126 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str33, ATTR_CLASS},
+#line 108 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str34, ATTR_TRUESPEED},
 #line 31 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str34, ATTR_CLEAR},
-#line 53 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str35, ATTR_HSPACE},
-#line 36 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str36, ATTR_COMPACT},
-#line 109 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str37, ATTR_TRUESPEED},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str35, ATTR_CLEAR},
+#line 104 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str36, ATTR_TARGET},
+#line 40 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str37, ATTR_DECLARE},
+#line 129 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str38, ATTR_CODEBASE},
 #line 105 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str38, ATTR_TARGET},
-#line 76 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str39, ATTR_ONABORT},
-#line 130 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str40, ATTR_CODEBASE},
-#line 48 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str41, ATTR_FRAME},
-#line 23 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str42, ATTR_BORDERCOLOR},
-#line 137 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str43, ATTR_ID},
-#line 106 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str44, ATTR_TEXT},
-#line 142 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str45, ATTR_ONBLUR},
-#line 135 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str46, ATTR_HEADERS},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str39, ATTR_TEXT},
+#line 101 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str40, ATTR_START},
+#line 36 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str41, ATTR_COMPACT},
+#line 38 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str42, ATTR_CONTROLS},
+#line 45 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str43, ATTR_ENCTYPE},
+#line 160 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str44, ATTR_PROFILE},
 #line 26 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str47, ATTR_CHAR},
-#line 138 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str48, ATTR_LABEL},
-#line 99 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str45, ATTR_CHAR},
+#line 49 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str46, ATTR_FRAME},
+#line 32 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str47, ATTR_CODETYPE},
+#line 29 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str48, ATTR_CHARSET},
+#line 97 "htmlattrs.gperf"
     {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str49, ATTR_SHAPE},
+#line 100 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str50, ATTR_SPAN},
+#line 102 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str51, ATTR_STYLE},
 #line 20 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str50, ATTR_BGCOLOR},
-#line 168 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str51, ATTR_USEMAP},
-#line 29 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str52, ATTR_CHARSET},
-#line 101 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str53, ATTR_SPAN},
-#line 161 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str54, ATTR_PROFILE},
-#line 163 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str55, ATTR_SCHEME},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str52, ATTR_BGCOLOR},
+#line 132 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str53, ATTR_DATETIME},
+#line 139 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str54, ATTR_NAME},
+#line 152 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str55, ATTR_ONMOUSEOUT},
+#line 167 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str56, ATTR_USEMAP},
+#line 77 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str57, ATTR_ONRESIZE},
+#line 154 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str58, ATTR_ONMOUSEUP},
+#line 50 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str59, ATTR_FRAMEBORDER},
 #line 35 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str56, ATTR_COLSPAN},
-#line 38 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str57, ATTR_CONTROLS},
-#line 80 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str58, ATTR_PAGEX},
-#line 28 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str59, ATTR_CHAROFF},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str60, ATTR_COLSPAN},
+#line 135 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str61, ATTR_HREF},
+#line 57 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str62, ATTR_ISMAP},
+#line 94 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str63, ATTR_SCROLLDELAY},
+#line 127 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str64, ATTR_CLASSID},
+#line 89 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str65, ATTR_ROWS},
+#line 79 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str66, ATTR_PAGEX},
 #line 78 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str60, ATTR_ONRESIZE},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str67, ATTR_OVERSRC},
+#line 158 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str68, ATTR_ONSUBMIT},
+#line 58 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str69, ATTR_LANG},
+#line 28 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str70, ATTR_CHAROFF},
+#line 80 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str71, ATTR_PAGEY},
+#line 162 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str72, ATTR_SCHEME},
+#line 138 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str73, ATTR_LONGDESC},
+#line 67 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str74, ATTR_MEDIA},
 #line 54 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str61, ATTR_HTML},
-#line 69 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str62, ATTR_METHOD},
-#line 63 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str63, ATTR_LOOPEND},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str75, ATTR_HSPACE},
 #line 91 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str64, ATTR_ROWS},
-#line 155 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str65, ATTR_ONMOUSEUP},
-#line 139 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str66, ATTR_LONGDESC},
-#line 119 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str67, ATTR_WRAP},
-#line 56 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str68, ATTR_ISMAP},
-#line 49 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str69, ATTR_FRAMEBORDER},
-#line 79 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str70, ATTR_OVERSRC},
-#line 11 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str71, ATTR_ACCEPT_CHARSET},
-#line 153 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str72, ATTR_ONMOUSEOUT},
-#line 128 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str73, ATTR_CLASSID},
-#line 57 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str74, ATTR_LANG},
-#line 71 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str75, ATTR_NOHREF},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str76, ATTR_RULES},
 #line 68 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str76, ATTR_MEDIA},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str77, ATTR_METHOD},
+#line 130 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str78, ATTR_CONTENT},
+#line 159 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str79, ATTR_ONUNLOAD},
+#line 18 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str80, ATTR_AXIS},
+#line 55 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str81, ATTR_HTML},
+#line 88 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str82, ATTR_REV},
+#line 118 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str83, ATTR_WRAP},
+#line 121 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str84, ATTR_ACTION},
+#line 134 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str85, ATTR_HEADERS},
 #line 42 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str77, ATTR_DIR},
-#line 126 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str78, ATTR_CITE},
-#line 74 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str79, ATTR_NOSHADE},
-#line 90 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str80, ATTR_REV},
-#line 93 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str81, ATTR_RULES},
-#line 141 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str82, ATTR_OBJECT},
-#line 45 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str83, ATTR_ENCTYPE},
-#line 160 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str84, ATTR_ONUNLOAD},
-#line 100 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str85, ATTR_SIZE},
-#line 167 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str86, ATTR_TITLE},
-#line 32 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str87, ATTR_CODETYPE},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str86, ATTR_DIR},
+#line 125 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str87, ATTR_CITE},
+#line 166 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str88, ATTR_TITLE},
 #line 140 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str88, ATTR_NAME},
-#line 117 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str89, ATTR_VSPACE},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str89, ATTR_OBJECT},
+#line 93 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str90, ATTR_SCROLLAMOUNT},
+#line 95 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str91, ATTR_SCROLLING},
 #line 21 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str90, ATTR_BGPROPERTIES},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str92, ATTR_BGPROPERTIES},
+#line 71 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str93, ATTR_NORESIZE},
+#line 81 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str94, ATTR_PLAIN},
+#line 116 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str95, ATTR_VSPACE},
 #line 143 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str91, ATTR_ONCHANGE},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str96, ATTR_ONCLICK},
+#line 168 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str97, ATTR_VALUE},
+#line 70 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str98, ATTR_NOHREF},
+#line 86 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str99, ATTR_READONLY},
+#line 11 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str100, ATTR_ACCEPT_CHARSET},
+#line 46 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str101, ATTR_ENCRYPTION},
+#line 30 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str102, ATTR_CHECKED},
 #line 103 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str92, ATTR_STYLE},
-#line 52 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str93, ATTR_HREFLANG},
-#line 50 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str94, ATTR_HEIGHT},
-#line 133 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str95, ATTR_DATETIME},
-#line 72 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str96, ATTR_NORESIZE},
-#line 81 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str97, ATTR_PAGEY},
-#line 122 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str98, ATTR_ACTION},
-#line 131 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str99, ATTR_CONTENT},
-#line 159 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str100, ATTR_ONSUBMIT},
-#line 96 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str101, ATTR_SCROLLDELAY},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str103, ATTR_TABINDEX},
 #line 144 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str102, ATTR_ONCLICK},
-#line 58 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str103, ATTR_LANGUAGE},
-#line 97 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str104, ATTR_SCROLLING},
-#line 30 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str105, ATTR_CHECKED},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str104, ATTR_ONDBLCLICK},
+#line 99 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str105, ATTR_SIZE},
+#line 73 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str106, ATTR_NOSHADE},
+#line 147 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str107, ATTR_ONKEYPRESS},
+#line 153 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str108, ATTR_ONMOUSEOVER},
+#line 164 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str109, ATTR_STANDBY},
 #line 27 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str106, ATTR_CHALLENGE},
-#line 82 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str107, ATTR_PLAIN},
-#line 25 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str108, ATTR_CELLSPACING},
-#line 95 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str109, ATTR_SCROLLAMOUNT},
-#line 18 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str110, ATTR_AXIS},
-#line 169 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str111, ATTR_VALUE},
-#line 75 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str112, ATTR_NOWRAP},
-#line 92 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str113, ATTR_ROWSPAN},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str110, ATTR_CHALLENGE},
+#line 16 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str111, ATTR_AUTOCOMPLETE},
 #line 44 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str114, ATTR_DISABLED},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str112, ATTR_DISABLED},
+#line 119 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str113, ATTR_Z_INDEX},
+#line 69 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str114, ATTR_MULTIPLE},
 #line 14 "htmlattrs.gperf"
     {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str115, ATTR_ALIGN},
-#line 24 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str116, ATTR_CELLPADDING},
-#line 108 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str117, ATTR_TOPMARGIN},
-#line 16 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str118, ATTR_AUTOCOMPLETE},
-#line 73 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str119, ATTR_NOSAVE},
-#line 120 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str120, ATTR_Z_INDEX},
-#line 145 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str121, ATTR_ONDBLCLICK},
-#line 154 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str122, ATTR_ONMOUSEOVER},
-#line 60 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str123, ATTR_LEFTMARGIN},
-#line 88 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str124, ATTR_READONLY},
-#line 124 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str125, ATTR_ARCHIVE},
+#line 74 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str116, ATTR_NOWRAP},
+#line 90 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str117, ATTR_ROWSPAN},
+#line 25 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str118, ATTR_CELLSPACING},
+#line 151 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str119, ATTR_ONMOUSEMOVE},
 #line 148 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str126, ATTR_ONKEYPRESS},
-#line 86 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str127, ATTR_PLUGINURL},
-#line 84 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str128, ATTR_PLUGINPAGE},
-#line 85 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str129, ATTR_PLUGINSPAGE},
-#line 70 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str130, ATTR_MULTIPLE},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str120, ATTR_ONKEYUP},
+#line 107 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str121, ATTR_TOPMARGIN},
+#line 24 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str122, ATTR_CELLPADDING},
 #line 13 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str131, ATTR_ACCESSKEY},
-#line 67 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str132, ATTR_MAXLENGTH},
-#line 51 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str133, ATTR_HIDDEN},
-#line 149 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str134, ATTR_ONKEYUP},
-#line 152 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str135, ATTR_ONMOUSEMOVE},
-#line 104 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str136, ATTR_TABINDEX},
-#line 165 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str137, ATTR_STANDBY},
-#line 118 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str138, ATTR_WIDTH},
-#line 19 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str139, ATTR_BEHAVIOR},
-#line 83 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str140, ATTR_PLAYCOUNT},
-#line 151 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str141, ATTR_ONMOUSEDOWN},
-#line 114 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str142, ATTR_VERSION},
-#line 17 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str143, ATTR_AUTOPLAY},
-#line 15 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str144, ATTR_ALINK},
-#line 43 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str145, ATTR_DIRECTION},
-#line 125 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str146, ATTR_BACKGROUND},
-#line 61 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str147, ATTR_LINK},
-#line 37 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str148, ATTR_CONTENTEDITABLE},
-#line 55 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str149, ATTR_HTTP_EQUIV},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str123, ATTR_ACCESSKEY},
+#line 72 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str124, ATTR_NOSAVE},
+#line 142 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str125, ATTR_ONCHANGE},
+#line 59 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str126, ATTR_LANGUAGE},
+#line 150 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str127, ATTR_ONMOUSEDOWN},
 #line 112 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str150, ATTR_VALIGN},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str128, ATTR_VALUETYPE},
+#line 37 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str129, ATTR_CONTENTEDITABLE},
+#line 53 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str130, ATTR_HREFLANG},
+#line 84 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str131, ATTR_PLUGINURL},
+#line 61 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str132, ATTR_LEFTMARGIN},
 #line 113 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str151, ATTR_VALUETYPE},
-#line 166 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str152, ATTR_SUMMARY},
-#line 65 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str153, ATTR_MARGINHEIGHT},
-#line 111 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str154, ATTR_UNKNOWN},
-#line 116 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str155, ATTR_VLINK},
-#line 147 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str156, ATTR_ONKEYDOWN},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str133, ATTR_VERSION},
+#line 17 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str134, ATTR_AUTOPLAY},
+#line 165 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str135, ATTR_SUMMARY},
+#line 43 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str136, ATTR_DIRECTION},
 #line 66 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str157, ATTR_MARGINWIDTH},
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str137, ATTR_MAXLENGTH},
+#line 51 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str138, ATTR_HEIGHT},
+#line 15 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str139, ATTR_ALINK},
+#line 124 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str140, ATTR_BACKGROUND},
+#line 111 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str141, ATTR_VALIGN},
+#line 123 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str142, ATTR_ARCHIVE},
+#line 52 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str143, ATTR_HIDDEN},
+#line 82 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str144, ATTR_PLUGINPAGE},
+#line 83 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str145, ATTR_PLUGINSPAGE},
+#line 19 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str146, ATTR_BEHAVIOR},
+#line 62 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str147, ATTR_LINK},
+#line 56 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str148, ATTR_HTTP_EQUIV},
+#line 117 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str149, ATTR_WIDTH},
+#line 146 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str150, ATTR_ONKEYDOWN},
+#line 47 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str151, ATTR_ENCRYPTION_KEY},
 #line 115 "htmlattrs.gperf"
-    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str158, ATTR_VISIBILITY}
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str152, ATTR_VLINK},
+#line 110 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str153, ATTR_UNKNOWN},
+#line 65 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str154, ATTR_MARGINWIDTH},
+#line 64 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str155, ATTR_MARGINHEIGHT},
+#line 114 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str156, ATTR_VISIBILITY},
+#line 98 "htmlattrs.gperf"
+    {(int)(long)&((struct spool_attr_t *)0)->spool_attr_str157, ATTR_SIGNING_KEY}
   };
 
 static const short lookup[] =
   {
      -1,  -1,  -1,   0,  -1,  -1,  -1,  -1,   1,   2,
-     -1,  -1,  -1,   3,   4,   5,   6,  -1,   7,   8,
-     -1,   9,  -1,  10,  -1,  11,  -1,  12,  -1,  13,
-     -1,  -1,  14,  15,  16,  -1,  17,  -1,  18,  19,
-     20,  -1,  -1,  -1,  21,  22,  23,  24,  25,  26,
-     -1,  27,  -1,  -1,  28,  29,  30,  31,  32,  33,
-     34,  35,  36,  -1,  37,  -1,  38,  39,  40,  -1,
-     41,  42,  43,  -1,  44,  -1,  45,  46,  -1,  47,
-     48,  -1,  -1,  -1,  -1,  49,  -1,  50,  -1,  -1,
-     -1,  51,  52,  -1,  53,  -1,  -1,  54,  -1,  -1,
-     -1,  55,  56,  57,  -1,  58,  -1,  59,  60,  61,
-     -1,  62,  63,  -1,  64,  -1,  -1,  -1,  -1,  65,
-     -1,  -1,  -1,  66,  67,  68,  69,  70,  -1,  71,
-     72,  -1,  73,  -1,  74,  -1,  75,  -1,  -1,  -1,
-     76,  -1,  -1,  77,  78,  -1,  -1,  79,  80,  -1,
-     81,  82,  83,  84,  85,  86,  -1,  -1,  87,  88,
-     -1,  89,  90,  91,  -1,  92,  -1,  -1,  93,  -1,
-     -1,  94,  -1,  95,  -1,  -1,  -1,  -1,  96,  -1,
-     97,  98,  99, 100,  -1,  -1,  -1,  -1,  -1,  -1,
-     -1, 101, 102, 103, 104,  -1,  -1, 105,  -1, 106,
-    107, 108, 109,  -1, 110, 111, 112, 113, 114,  -1,
-     -1,  -1,  -1,  -1,  -1, 115,  -1,  -1,  -1,  -1,
-     -1, 116,  -1,  -1, 117,  -1,  -1,  -1,  -1,  -1,
-     -1,  -1, 118,  -1,  -1,  -1, 119, 120,  -1,  -1,
-    121, 122,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
-    123,  -1,  -1, 124,  -1,  -1,  -1, 125,  -1,  -1,
-    126,  -1,  -1,  -1, 127, 128, 129,  -1, 130, 131,
-     -1,  -1,  -1,  -1, 132,  -1, 133, 134,  -1,  -1,
-     -1, 135,  -1, 136,  -1,  -1,  -1, 137,  -1,  -1,
-     -1,  -1,  -1,  -1,  -1, 138,  -1,  -1, 139, 140,
-     -1, 141, 142, 143,  -1, 144,  -1,  -1,  -1, 145,
-    146,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
-     -1,  -1,  -1,  -1, 147, 148,  -1,  -1,  -1,  -1,
-     -1,  -1,  -1,  -1,  -1, 149, 150,  -1,  -1,  -1,
+      3,  -1,   4,   5,   6,  -1,   7,   8,   9,  10,
+     11,  12,  -1,  13,  -1,  -1,  -1,  -1,  14,  -1,
+     15,  16,  -1,  -1,  -1,  -1,  17,  -1,  -1,  18,
+     -1,  19,  -1,  20,  21,  -1,  22,  -1,  -1,  23,
+     -1,  24,  25,  -1,  26,  27,  28,  29,  -1,  30,
+     -1,  -1,  31,  32,  -1,  33,  -1,  -1,  -1,  34,
+     35,  36,  37,  38,  39,  40,  -1,  41,  42,  -1,
+     -1,  -1,  43,  -1,  -1,  -1,  -1,  44,  -1,  45,
+     46,  -1,  -1,  47,  -1,  -1,  -1,  48,  -1,  -1,
+     49,  -1,  -1,  -1,  50,  51,  -1,  52,  53,  54,
+     55,  56,  -1,  57,  58,  -1,  59,  60,  -1,  61,
+     62,  63,  64,  -1,  65,  66,  -1,  67,  68,  69,
+     -1,  -1,  70,  -1,  -1,  71,  72,  -1,  73,  -1,
+     74,  75,  -1,  -1,  -1,  76,  77,  78,  79,  80,
+     -1,  -1,  -1,  -1,  81,  -1,  -1,  -1,  82,  83,
+     -1,  84,  85,  86,  87,  88,  89,  -1,  -1,  -1,
+     -1,  -1,  -1,  -1,  -1,  -1,  -1,  90,  -1,  91,
+     -1,  -1,  92,  93,  -1,  94,  95,  96,  -1,  -1,
+     97,  98,  -1,  99, 100, 101,  -1,  -1,  -1,  -1,
+     -1,  -1, 102, 103,  -1, 104,  -1,  -1,  -1, 105,
+     -1,  -1, 106,  -1,  -1, 107, 108, 109,  -1, 110,
+     -1,  -1, 111, 112,  -1,  -1,  -1, 113, 114,  -1,
+    115, 116, 117,  -1,  -1,  -1, 118,  -1,  -1,  -1,
+     -1, 119, 120,  -1, 121,  -1, 122,  -1,  -1, 123,
+     -1, 124,  -1, 125,  -1,  -1,  -1,  -1, 126,  -1,
+     -1, 127,  -1,  -1, 128, 129,  -1,  -1,  -1,  -1,
+     -1,  -1,  -1, 130, 131, 132,  -1, 133, 134,  -1,
+     -1,  -1,  -1,  -1,  -1,  -1,  -1, 135,  -1, 136,
+     -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
+     -1,  -1,  -1,  -1, 137,  -1, 138,  -1,  -1,  -1,
+    139,  -1,  -1,  -1,  -1, 140, 141,  -1,  -1,  -1,
+     -1,  -1, 142,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
+     -1, 143,  -1,  -1,  -1, 144, 145,  -1,  -1,  -1,
+     -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 146,  -1,
+     -1,  -1,  -1,  -1, 147,  -1,  -1,  -1,  -1,  -1,
+     -1,  -1,  -1,  -1,  -1, 148,  -1,  -1,  -1,  -1,
+    149,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
+     -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 150,
      -1,  -1,  -1,  -1, 151,  -1,  -1,  -1,  -1,  -1,
-     -1,  -1,  -1,  -1,  -1,  -1,  -1, 152,  -1,  -1,
      -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
+    152,  -1,  -1,  -1,  -1,  -1,  -1, 153,  -1,  -1,
      -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
      -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
      -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
-     -1,  -1, 153,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
-     -1,  -1,  -1,  -1,  -1,  -1,  -1, 154,  -1,  -1,
      -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
-    155,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
      -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
-     -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 156,
-     -1,  -1,  -1,  -1,  -1,  -1, 157,  -1,  -1,  -1,
+     -1, 154,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
      -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
+     -1,  -1,  -1,  -1,  -1,  -1,  -1, 155,  -1,  -1,
      -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
      -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
+    156,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
      -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
      -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
      -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
@@ -852,14 +851,12 @@
      -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
      -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
      -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
-     -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
-     -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
-     -1,  -1,  -1,  -1,  -1, 158
+     -1, 157
   };
 
 #ifdef __GNUC__
 __inline
-#ifdef __GNUC_STDC_INLINE__
+#if defined __GNUC_STDC_INLINE__ || defined __GNUC_GNU_INLINE__
 __attribute__ ((__gnu_inline__))
 #endif
 #endif
@@ -885,171 +882,170 @@
     }
   return 0;
 }
-#line 170 "htmlattrs.gperf"
+#line 169 "htmlattrs.gperf"
 
 
 
 static const unsigned short attrList[] = {
     65535,
-    149,
-    17,
-    131,
+    157,
+    28,
+    123,
     115,
-    144,
+    139,
+    111,
+    134,
+    80,
+    146,
+    52,
+    92,
+    16,
+    17,
+    122,
     118,
-    143,
+    45,
     110,
-    139,
-    50,
-    90,
-    27,
-    42,
-    116,
-    108,
+    70,
+    48,
+    102,
+    35,
     47,
-    106,
-    59,
-    52,
-    105,
-    34,
-    87,
-    5,
+    3,
     2,
-    56,
-    36,
-    148,
-    57,
-    9,
-    24,
-    20,
-    77,
-    145,
-    114,
-    83,
-    10,
-    26,
+    60,
     41,
-    69,
-    94,
-    133,
-    93,
-    35,
-    61,
-    149,
-    68,
-    74,
-    103,
-    16,
-    123,
-    147,
-    4,
-    63,
-    19,
-    153,
+    129,
+    42,
+    7,
+    37,
+    27,
+    86,
+    136,
+    112,
+    43,
+    101,
     157,
-    132,
-    76,
-    62,
+    18,
+    46,
+    59,
+    138,
+    143,
     130,
     75,
-    96,
-    119,
-    79,
-    112,
-    39,
-    12,
-    60,
-    70,
-    58,
-    97,
-    107,
-    140,
-    128,
-    129,
-    127,
+    81,
+    157,
+    62,
+    69,
+    126,
+    21,
+    132,
+    147,
     6,
+    155,
+    154,
+    137,
+    74,
+    77,
+    114,
+    98,
+    93,
     124,
-    7,
-    80,
-    64,
-    113,
-    81,
-    11,
-    109,
-    101,
-    104,
+    106,
+    116,
     25,
-    49,
-    85,
-    53,
-    22,
-    92,
-    136,
-    38,
-    44,
-    1,
-    117,
-    37,
-    13,
-    154,
-    150,
-    151,
-    142,
-    158,
-    155,
-    89,
-    138,
+    4,
+    57,
     67,
-    149,
-    21,
-    98,
-    32,
-    125,
-    146,
-    78,
-    29,
-    73,
-    8,
-    40,
-    99,
-    33,
-    95,
-    3,
-    46,
-    28,
-    43,
-    48,
     66,
-    88,
+    71,
+    94,
+    144,
+    145,
+    131,
+    12,
+    99,
+    13,
     82,
-    45,
+    65,
+    117,
+    76,
+    11,
+    90,
+    63,
     91,
-    102,
+    20,
+    49,
+    157,
+    105,
+    50,
+    40,
+    51,
+    103,
+    36,
+    39,
+    5,
     121,
-    31,
+    34,
+    30,
+    153,
+    141,
+    128,
+    133,
     156,
-    126,
-    134,
+    152,
+    95,
+    149,
+    83,
+    157,
     23,
-    141,
-    135,
-    72,
-    122,
-    65,
+    84,
+    32,
+    142,
+    140,
+    87,
+    33,
+    64,
+    10,
+    38,
+    78,
+    26,
+    53,
     14,
-    18,
+    85,
+    61,
+    29,
     15,
-    100,
-    84,
+    73,
     54,
-    30,
+    89,
+    24,
+    125,
+    96,
+    104,
+    31,
+    150,
+    107,
+    120,
+    22,
+    127,
+    119,
     55,
+    108,
+    58,
+    8,
+    9,
+    1,
+    68,
+    79,
+    44,
+    19,
+    72,
     0,
-    137,
-    152,
-    86,
-    51,
-    111,
+    109,
+    135,
+    88,
+    56,
+    97,
     65535
 };
 
Index: misc/htmlattrs.h
===================================================================
--- misc/htmlattrs.h	(revision 1132763)
+++ misc/htmlattrs.h	(working copy)
@@ -1,7 +1,7 @@
 /* This file is automatically generated from
 htmlattrs.in by makeattrs, do not edit */
 /* Copyright 1999 Lars Knoll */
-#if 0
+
 #ifndef HTML_ATTRS_H
 #define HTML_ATTRS_H
 
@@ -44,133 +44,131 @@
 #define ATTR_DIRECTION 33
 #define ATTR_DISABLED 34
 #define ATTR_ENCTYPE 35
-#define ATTR_END 36
-#define ATTR_FACE 37
-#define ATTR_FRAME 38
-#define ATTR_FRAMEBORDER 39
-#define ATTR_HEIGHT 40
-#define ATTR_HIDDEN 41
-#define ATTR_HREFLANG 42
-#define ATTR_HSPACE 43
-#define ATTR_HTML 44
-#define ATTR_HTTP_EQUIV 45
-#define ATTR_ISMAP 46
-#define ATTR_LANG 47
-#define ATTR_LANGUAGE 48
-#define ATTR_LEFT 49
-#define ATTR_LEFTMARGIN 50
-#define ATTR_LINK 51
-#define ATTR_LOOP 52
-#define ATTR_LOOPEND 53
-#define ATTR_LOOPSTART 54
-#define ATTR_MARGINHEIGHT 55
-#define ATTR_MARGINWIDTH 56
-#define ATTR_MAXLENGTH 57
-#define ATTR_MEDIA 58
-#define ATTR_METHOD 59
-#define ATTR_MULTIPLE 60
-#define ATTR_NOHREF 61
-#define ATTR_NORESIZE 62
-#define ATTR_NOSAVE 63
-#define ATTR_NOSHADE 64
-#define ATTR_NOWRAP 65
-#define ATTR_ONABORT 66
-#define ATTR_ONERROR 67
-#define ATTR_ONRESIZE 68
-#define ATTR_OVERSRC 69
-#define ATTR_PAGEX 70
-#define ATTR_PAGEY 71
-#define ATTR_PLAIN 72
-#define ATTR_PLAYCOUNT 73
-#define ATTR_PLUGINPAGE 74
-#define ATTR_PLUGINSPAGE 75
-#define ATTR_PLUGINURL 76
-#define ATTR_POSTER 77
-#define ATTR_READONLY 78
-#define ATTR_REL 79
-#define ATTR_REV 80
-#define ATTR_ROWS 81
-#define ATTR_ROWSPAN 82
-#define ATTR_RULES 83
-#define ATTR_SCOPE 84
-#define ATTR_SCROLLAMOUNT 85
-#define ATTR_SCROLLDELAY 86
-#define ATTR_SCROLLING 87
-#define ATTR_SELECTED 88
-#define ATTR_SHAPE 89
-#define ATTR_SIZE 90
-#define ATTR_SPAN 91
-#define ATTR_START 92
-#define ATTR_STYLE 93
-#define ATTR_TABINDEX 94
-#define ATTR_TARGET 95
-#define ATTR_TEXT 96
-#define ATTR_TOP 97
-#define ATTR_TOPMARGIN 98
-#define ATTR_TRUESPEED 99
-#define ATTR_TYPE 100
-#define ATTR_UNKNOWN 101
-#define ATTR_VALIGN 102
-#define ATTR_VALUETYPE 103
-#define ATTR_VERSION 104
-#define ATTR_VISIBILITY 105
-#define ATTR_VLINK 106
-#define ATTR_VSPACE 107
-#define ATTR_WIDTH 108
-#define ATTR_WRAP 109
-#define ATTR_Z_INDEX 110
-#define ATTR_ABBR 111
-#define ATTR_ACTION 112
-#define ATTR_ALT 113
-#define ATTR_ARCHIVE 114
-#define ATTR_BACKGROUND 115
-#define ATTR_CITE 116
-#define ATTR_CLASS 117
-#define ATTR_CLASSID 118
-#define ATTR_CODE 119
-#define ATTR_CODEBASE 120
-#define ATTR_CONTENT 121
-#define ATTR_DATA 122
-#define ATTR_DATETIME 123
-#define ATTR_FOR 124
-#define ATTR_HEADERS 125
-#define ATTR_HREF 126
-#define ATTR_ID 127
-#define ATTR_LABEL 128
-#define ATTR_LONGDESC 129
-#define ATTR_NAME 130
-#define ATTR_OBJECT 131
-#define ATTR_ONBLUR 132
-#define ATTR_ONCHANGE 133
-#define ATTR_ONCLICK 134
-#define ATTR_ONDBLCLICK 135
-#define ATTR_ONFOCUS 136
-#define ATTR_ONKEYDOWN 137
-#define ATTR_ONKEYPRESS 138
-#define ATTR_ONKEYUP 139
-#define ATTR_ONLOAD 140
-#define ATTR_ONMOUSEDOWN 141
-#define ATTR_ONMOUSEMOVE 142
-#define ATTR_ONMOUSEOUT 143
-#define ATTR_ONMOUSEOVER 144
-#define ATTR_ONMOUSEUP 145
-#define ATTR_ONRESET 146
-#define ATTR_ONSELECT 147
-#define ATTR_ONSCROLL 148
-#define ATTR_ONSUBMIT 149
-#define ATTR_ONUNLOAD 150
-#define ATTR_PROFILE 151
-#define ATTR_PROMPT 152
-#define ATTR_SCHEME 153
-#define ATTR_SRC 154
-#define ATTR_STANDBY 155
-#define ATTR_SUMMARY 156
-#define ATTR_TITLE 157
-#define ATTR_USEMAP 158
-#define ATTR_VALUE 159
-#define ATTR_LAST_ATTR 159
-#define ATTR_LAST_CI_ATTR 110
+#define ATTR_ENCRYPTION 36
+#define ATTR_ENCRYPTION_KEY 37
+#define ATTR_FACE 38
+#define ATTR_FRAME 39
+#define ATTR_FRAMEBORDER 40
+#define ATTR_HEIGHT 41
+#define ATTR_HIDDEN 42
+#define ATTR_HREFLANG 43
+#define ATTR_HSPACE 44
+#define ATTR_HTML 45
+#define ATTR_HTTP_EQUIV 46
+#define ATTR_ISMAP 47
+#define ATTR_LANG 48
+#define ATTR_LANGUAGE 49
+#define ATTR_LEFT 50
+#define ATTR_LEFTMARGIN 51
+#define ATTR_LINK 52
+#define ATTR_LOOP 53
+#define ATTR_MARGINHEIGHT 54
+#define ATTR_MARGINWIDTH 55
+#define ATTR_MAXLENGTH 56
+#define ATTR_MEDIA 57
+#define ATTR_METHOD 58
+#define ATTR_MULTIPLE 59
+#define ATTR_NOHREF 60
+#define ATTR_NORESIZE 61
+#define ATTR_NOSAVE 62
+#define ATTR_NOSHADE 63
+#define ATTR_NOWRAP 64
+#define ATTR_ONABORT 65
+#define ATTR_ONERROR 66
+#define ATTR_ONRESIZE 67
+#define ATTR_OVERSRC 68
+#define ATTR_PAGEX 69
+#define ATTR_PAGEY 70
+#define ATTR_PLAIN 71
+#define ATTR_PLUGINPAGE 72
+#define ATTR_PLUGINSPAGE 73
+#define ATTR_PLUGINURL 74
+#define ATTR_POSTER 75
+#define ATTR_READONLY 76
+#define ATTR_REL 77
+#define ATTR_REV 78
+#define ATTR_ROWS 79
+#define ATTR_ROWSPAN 80
+#define ATTR_RULES 81
+#define ATTR_SCOPE 82
+#define ATTR_SCROLLAMOUNT 83
+#define ATTR_SCROLLDELAY 84
+#define ATTR_SCROLLING 85
+#define ATTR_SELECTED 86
+#define ATTR_SHAPE 87
+#define ATTR_SIGNING_KEY 88
+#define ATTR_SIZE 89
+#define ATTR_SPAN 90
+#define ATTR_START 91
+#define ATTR_STYLE 92
+#define ATTR_TABINDEX 93
+#define ATTR_TARGET 94
+#define ATTR_TEXT 95
+#define ATTR_TOP 96
+#define ATTR_TOPMARGIN 97
+#define ATTR_TRUESPEED 98
+#define ATTR_TYPE 99
+#define ATTR_UNKNOWN 100
+#define ATTR_VALIGN 101
+#define ATTR_VALUETYPE 102
+#define ATTR_VERSION 103
+#define ATTR_VISIBILITY 104
+#define ATTR_VLINK 105
+#define ATTR_VSPACE 106
+#define ATTR_WIDTH 107
+#define ATTR_WRAP 108
+#define ATTR_Z_INDEX 109
+#define ATTR_ABBR 110
+#define ATTR_ACTION 111
+#define ATTR_ALT 112
+#define ATTR_ARCHIVE 113
+#define ATTR_BACKGROUND 114
+#define ATTR_CITE 115
+#define ATTR_CLASS 116
+#define ATTR_CLASSID 117
+#define ATTR_CODE 118
+#define ATTR_CODEBASE 119
+#define ATTR_CONTENT 120
+#define ATTR_DATA 121
+#define ATTR_DATETIME 122
+#define ATTR_FOR 123
+#define ATTR_HEADERS 124
+#define ATTR_HREF 125
+#define ATTR_ID 126
+#define ATTR_LABEL 127
+#define ATTR_LONGDESC 128
+#define ATTR_NAME 129
+#define ATTR_OBJECT 130
+#define ATTR_ONBLUR 131
+#define ATTR_ONCHANGE 132
+#define ATTR_ONCLICK 133
+#define ATTR_ONDBLCLICK 134
+#define ATTR_ONFOCUS 135
+#define ATTR_ONKEYDOWN 136
+#define ATTR_ONKEYPRESS 137
+#define ATTR_ONKEYUP 138
+#define ATTR_ONLOAD 139
+#define ATTR_ONMOUSEDOWN 140
+#define ATTR_ONMOUSEMOVE 141
+#define ATTR_ONMOUSEOUT 142
+#define ATTR_ONMOUSEOVER 143
+#define ATTR_ONMOUSEUP 144
+#define ATTR_ONRESET 145
+#define ATTR_ONSELECT 146
+#define ATTR_ONSCROLL 147
+#define ATTR_ONSUBMIT 148
+#define ATTR_ONUNLOAD 149
+#define ATTR_PROFILE 150
+#define ATTR_PROMPT 151
+#define ATTR_SCHEME 152
+#define ATTR_SRC 153
+#define ATTR_STANDBY 154
+#define ATTR_SUMMARY 155
+#define ATTR_TITLE 156
+#define ATTR_USEMAP 157
+#define ATTR_VALUE 158
+#define ATTR_LAST_ATTR 158
+#define ATTR_LAST_CI_ATTR 109
 const char* getAttrName(unsigned short id) KDE_NO_EXPORT;
 
 #endif
-#endif
Index: misc/htmlnames.cpp
===================================================================
--- misc/htmlnames.cpp	(revision 1132763)
+++ misc/htmlnames.cpp	(working copy)
@@ -168,6 +168,8 @@
     s_idTable->addStaticMapping(localNamePart(ATTR_DIRECTION), "direction");
     s_idTable->addStaticMapping(localNamePart(ATTR_DISABLED), "disabled");
     s_idTable->addStaticMapping(localNamePart(ATTR_ENCTYPE), "enctype");
+    s_idTable->addStaticMapping(localNamePart(ATTR_ENCRYPTION), "encryption");
+    s_idTable->addStaticMapping(localNamePart(ATTR_ENCRYPTION_KEY), "encryption-key");
     s_idTable->addStaticMapping(localNamePart(ATTR_FACE), "face");
     s_idTable->addStaticMapping(localNamePart(ATTR_FRAMEBORDER), "frameborder");
     s_idTable->addStaticMapping(localNamePart(ATTR_HEIGHT), "height");
@@ -215,6 +217,7 @@
     s_idTable->addStaticMapping(localNamePart(ATTR_SCROLLING), "scrolling");
     s_idTable->addStaticMapping(localNamePart(ATTR_SELECTED), "selected");
     s_idTable->addStaticMapping(localNamePart(ATTR_SHAPE), "shape");
+    s_idTable->addStaticMapping(localNamePart(ATTR_SIGNING_KEY), "signing-key");
     s_idTable->addStaticMapping(localNamePart(ATTR_SIZE), "size");
     s_idTable->addStaticMapping(localNamePart(ATTR_START), "start");
     s_idTable->addStaticMapping(localNamePart(ATTR_TABINDEX), "tabindex");
Index: khtml_ext.cpp
===================================================================
--- khtml_ext.cpp	(revision 1132763)
+++ khtml_ext.cpp	(working copy)
@@ -33,6 +33,12 @@
 #include "misc/loader.h"
 #include "dom/html_form.h"
 #include "dom/html_image.h"
+#ifdef KLEO_SUPPORT
+#include "ui_encryptiondetails.h"
+#include <kleo/cryptobackendfactory.h>
+#include <kleo/keylistjob.h>
+#include <gpgme++/keylistresult.h>
+#endif
 #include <QtGui/QClipboard>
 #include <QtCore/QFileInfo>
 #include <QtGui/QMenu>
@@ -68,6 +74,8 @@
 #include "misc/htmltags.h"
 
 #include "khtmlpart_p.h"
+#include <html_blockimpl.h>
+#include <gpgme++/key.h>
 
 KHTMLPartBrowserExtension::KHTMLPartBrowserExtension( KHTMLPart *parent )
 : KParts::BrowserExtension( parent )
@@ -390,6 +398,9 @@
   QString m_suggestedFilename;
     KActionCollection* m_actionCollection;
     KParts::BrowserExtension::ActionGroupMap actionGroups;
+#ifdef KLEO_SUPPORT
+    DOM::Element m_nodeUnderMouse;
+#endif
 };
 
 
@@ -403,6 +414,9 @@
     bool hasSelection = khtml->hasSelection();
 
     DOM::Element e = khtml->nodeUnderMouse();
+#ifdef KLEO_SUPPORT
+    d->m_nodeUnderMouse = e;
+#endif
 
     if ( !e.isNull() && (e.elementId() == ID_IMG ||
                          (e.elementId() == ID_INPUT && !static_cast<DOM::HTMLInputElement>(e).src().isEmpty())))
@@ -448,6 +462,7 @@
         editActions.append(separator);
 
         d->actionGroups.insert("editactions", editActions);
+        d->actionGroups.insert("tonto", editActions);
     }
 
     if (!url.isEmpty()) {
@@ -539,6 +554,19 @@
         }
     }
 
+#ifdef KLEO_SUPPORT
+    if (!e.isNull() && e.elementId() == ID_DIV) {
+        DOM::HTMLDivElementImpl *div = static_cast<DOM::HTMLDivElementImpl*>(e.handle());
+        if (div->isEncrypted()) {
+            KAction *action = new KAction(i18n("&Details of Encrypted Message..."), this);
+            action->setIcon(SmallIcon("security-high"));
+            d->m_actionCollection->addAction("detailsofencryptedmessage", action);
+            connect(action, SIGNAL(triggered(bool)), this, SLOT(slotDetailsOfEncryptedMessage()));
+            partActions.append(action);
+        }
+    }
+#endif
+
     if (isImage) {
         if ( e.elementId() == ID_IMG ) {
             d->m_imageURL = KUrl( static_cast<DOM::HTMLImageElement>( e ).src().string() );
@@ -630,6 +658,38 @@
     delete d;
 }
 
+// #ifdef KLEO_SUPPORT
+void KHTMLPopupGUIClient::slotDetailsOfEncryptedMessage()
+{
+    DOM::HTMLDivElementImpl *div =
+        static_cast<DOM::HTMLDivElementImpl*>(d->m_nodeUnderMouse.handle());
+    DOM::TextImpl *textImpl = static_cast<DOM::TextImpl *>(div->firstChild());
+    kDebug() << textImpl->plainTextvalue();
+
+    // Obtain key
+    QString shortKeyID = textImpl->decryptionResult().recipient(0).shortKeyID();
+    std::vector<GpgME::Key> keys;
+    Kleo::KeyListJob * job = Kleo::CryptoBackendFactory::instance()->openpgp()->keyListJob(false);
+    job->exec(QStringList(shortKeyID), false, keys);
+    if (keys.empty()) {
+        return;
+    }
+    GpgME::Key key = keys.front();
+    
+    QDialog *dialog = new QDialog(0);
+    Ui::EncryptionDialog dialogUi;
+    dialogUi.setupUi(dialog);
+    dialogUi.closeButton->setIcon(SmallIcon("dialog-close"));
+    dialogUi.plainText->setPlainText(textImpl->plainTextvalue()->string());
+    dialogUi.nameLabel->setText(key.userID(0).name());
+    dialogUi.emailLabel->setText(key.userID(0).email());
+    dialogUi.detailsLabel->setText(i18n("Fingerprint: &lt;b&gt;%1&lt;/b&gt;&lt;br/&gt;",
+        key.shortKeyID()));
+    connect(dialogUi.closeButton, SIGNAL(clicked()), dialog, SLOT(close()));
+    dialog->show();
+}
+// #endif
+
 void KHTMLPopupGUIClient::addSearchActions(QList<QAction *>& editActions)
 {
     // Fill search provider entries
Index: tests/CMakeLists.txt
===================================================================
--- tests/CMakeLists.txt	(revision 1132763)
+++ tests/CMakeLists.txt	(working copy)
@@ -1,5 +1,6 @@
 set( EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR} )
 
+include_directories( ${GPGMEPP_INCLUDES} )
 include_directories(${KDE4_KPARTS_INCLUDES} ${CMAKE_CURRENT_SOURCE_DIR}/..)
 include_directories(
   ${CMAKE_SOURCE_DIR}/khtml/misc
@@ -37,10 +38,10 @@
   ${CMAKE_CURRENT_BINARY_DIR}/../css
 )
 kde4_add_unit_test( khtmlparttest khtmlparttest.cpp )
-target_link_libraries( khtmlparttest ${QT_QTTEST_LIBRARY} ${KDE4_KDECORE_LIBS} khtml )
+target_link_libraries( khtmlparttest ${QT_QTTEST_LIBRARY} ${KDE4_KDECORE_LIBS}  ${GPGMEPP_VANILLA_LIBRARIES} khtml )
 
 # msvc linker doesn't like "#define protected public"
-if(NOT MSVC)
+if(NOT MSVC AND NOT KLEO_SUPPORT)
 
     ########### next target ###############
     set(khtmltest_SRCS
@@ -49,7 +50,7 @@
 
     qt4_add_resources( khtmltest_SRCS testkhtml.qrc )
     kde4_add_executable(khtmltest TEST ${khtmltest_SRCS} )
-    target_link_libraries( khtmltest ${KDE4_KDECORE_LIBS} khtml )
+    target_link_libraries( khtmltest ${KDE4_KDECORE_LIBS} ${GPGMEPP_VANILLA_LIBRARIES} khtml )
 
     ########### next target ###############
 endif(NOT MSVC)
Index: html/html_blockimpl.cpp
===================================================================
--- html/html_blockimpl.cpp	(revision 1132763)
+++ html/html_blockimpl.cpp	(working copy)
@@ -33,6 +33,7 @@
 #include "misc/htmlhashes.h"
 
 #include <kdebug.h>
+#include <render_object.h>
 
 using namespace khtml;
 using namespace DOM;
@@ -254,8 +255,29 @@
     }
 }
 
+
 // ------------------------------------------------------------------------
+#ifdef KLEO_SUPPORT
+NodeImpl* HTMLDivElementImpl::addChild(NodeImpl* newChild)
+{
+    kDebug() << isEncrypted() << childNodeCount() << newChild->nodeName();
+    if (!isEncrypted()) {
+        return DOM::HTMLGenericElementImpl::addChild(newChild);
+    } else if (childNodeCount() == 0 && newChild->isTextNode()) {
+        NodeImpl* ret = DOM::HTMLGenericElementImpl::addChild(newChild);
+        // couldn't be done earlier because TextImpl::isEncrypted() would return false as it had
+        // no parent because we hadn't called to addChild yet:
+        static_cast<CharacterDataImpl*>(newChild)->decrypt();
+        return ret;
+    } else {
+        return 0;
+    }
+}
+#endif
 
+// ------------------------------------------------------------------------
+
+
 HTMLLayerElementImpl::HTMLLayerElementImpl(DocumentImpl *doc, ushort _tagid)
     : HTMLDivElementImpl( doc, _tagid )
 {
Index: html/html_elementimpl.h
===================================================================
--- html/html_elementimpl.h	(revision 1132763)
+++ html/html_elementimpl.h	(working copy)
@@ -24,6 +24,7 @@
 #define HTML_ELEMENTIMPL_H
 
 #include "xml/dom_elementimpl.h"
+#include "../config-khtml.h"
 
 namespace DOM {
 
@@ -66,6 +67,15 @@
 
     virtual DOMString toString() const;
 
+#ifdef KLEO_SUPPORT
+    enum encryptionTypeEnum {
+        NO_ENCRYPTION,
+        GPG
+    };
+    bool isEncrypted() const { return m_encryptionType != NO_ENCRYPTION; }
+    encryptionTypeEnum encryptionType() const { return KDE_CAST_BF_ENUM(encryptionTypeEnum, m_encryptionType); }
+    KDE_BF_ENUM(encryptionTypeEnum) m_encryptionType : 1;
+#endif
 protected:
     // for IMG, OBJECT and APPLET
     void addHTMLAlignment( DOMString alignment );
Index: html/html_formimpl.cpp
===================================================================
--- html/html_formimpl.cpp	(revision 1132763)
+++ html/html_formimpl.cpp	(working copy)
@@ -62,6 +62,24 @@
 #include <QtCore/QDir>
 #include <QtCore/QTextCodec>
 
+#ifdef KLEO_SUPPORT
+#include <kleo/keylistjob.h>
+// #include <kleo/cryptplugwrapper.h>
+
+#include <gpgme++/keylistresult.h>
+#include <kleo/ui/keyselectiondialog.h>
+#include <kleo/ui/keyrequester.h>
+#include <kleo/cryptobackendfactory.h>
+#include <kleo/cryptobackend.h>
+#include <kleo/encryptjob.h>
+#include <kleo/decryptjob.h>
+
+#include <gpgme++/key.h>
+#include <gpgme++/encryptionresult.h>
+#include <gpgme++/decryptionresult.h>
+#endif
+
+
 // for keygen
 #include <QtCore/QCharRef>
 #include <ksslkeygen.h>
@@ -1275,6 +1293,10 @@
     : HTMLGenericFormElementImpl(doc, f)
 {
     m_type = TEXT;
+#ifdef KLEO_SUPPORT
+    m_encryptionType = NO_ENCRYPTION;
+    m_encryptedValueSynced = false;
+#endif
     m_maxLen = -1;
     m_size = 20;
     m_clicked = false;
@@ -1412,6 +1434,11 @@
         // Don't mess with those...
         break;
     default:
+#ifdef KLEO_SUPPORT
+        if (m_encryptionType != NO_ENCRYPTION) {
+            break;
+        }
+#endif
         setValue(state.endsWith('N') ? DOMString() : DOMString(state.left(state.length()-2)));
         m_unsubmittedFormChange = (state.right(1) == "M");
         break;
@@ -1442,10 +1469,37 @@
     case ATTR_AUTOCOMPLETE:
         m_autocomplete = strcasecmp( attr->value(), "off" );
         break;
+#ifdef KLEO_SUPPORT
+    case ATTR_ENCRYPTION:
+        if (strcasecmp(attr->value(), "gpg") == 0) {
+            m_encryptionType = GPG;
+            m_value = QString();
+
+            if (!m_PGPEncryptionKeyFingerprint.isNull()) {
+                handleEncryption();
+            }
+        }
+        break;
+    case ATTR_ENCRYPTION_KEY:
+        m_PGPEncryptionKeyFingerprint = attr->value();
+
+        if (m_encryptionType == GPG) {
+            handleEncryption();
+        }
+        break;
+    case ATTR_SIGNING_KEY:
+        m_PGPSigningKeyFingerprint = attr->value();
+        break;
+#endif
     case ATTR_TYPE:
         parseType(attr->value());
         break;
     case ATTR_VALUE:
+#ifdef KLEO_SUPPORT
+        if (m_encryptionType != NO_ENCRYPTION) {
+            break;
+        }
+#endif
         if (m_value.isNull()) {// We only need to setChanged if the form is looking
             setChanged();      // at the default value right now.
             if (m_type == TEXT && m_render)
@@ -1504,6 +1558,7 @@
             document()->createHTMLEventListener(attr->value().string(), "onchange", this));
         break;
     default:
+        kDebug() << "?? attr->localName()" << attr->localName();
         HTMLGenericFormElementImpl::parseAttribute(attr);
     }
 }
@@ -1513,7 +1568,13 @@
     const HTMLInputElementImpl *e =
         static_cast<const HTMLInputElementImpl*>(source);
 
+#ifdef KLEO_SUPPORT
+    if (m_encryptionType == NO_ENCRYPTION) {
+        m_value = e->m_value;
+    }
+#else
     m_value = e->m_value;
+#endif
     m_checked = e->m_checked;
     // ### copy more?
 
@@ -1857,6 +1918,17 @@
     if (val.isNull() && m_type != FILE)
         val = getAttribute(ATTR_VALUE);
 
+#ifdef KLEO_SUPPORT
+    if (m_encryptionType != NO_ENCRYPTION) {
+        if (!m_encryptedValueSynced) {
+            // Next lines are a HUGE HACK equivalent to calling to handleEncryption(); but casting away constness
+            DOM::HTMLInputElementImpl *this_unconst = const_cast<DOM::HTMLInputElementImpl*>(this);
+            this_unconst->handleEncryption();
+        }
+        val = m_encryptedValue;
+    }
+#endif
+    
     return val;
 }
 
@@ -1864,17 +1936,125 @@
 void HTMLInputElementImpl::setValue(DOMString val)
 {
     if (m_type == FILE) return;
+    
+#ifdef KLEO_SUPPORT
+    if (m_encryptionType != NO_ENCRYPTION) {
+        return;        
+    }
+    m_value = val;
+#else
+    m_value = val;
+#endif
 
-    m_value = val;
     // ### set attribute for other types, too. no need for m_value
     // ### in those cases.
     if (m_type == RADIO || m_type == CHECKBOX)
 	setAttribute(ATTR_VALUE, m_value);
     if (m_type == TEXT && m_render)
         m_render->updateFromElement();
+    
     setChanged();
 }
 
+#ifdef KLEO_SUPPORT
+
+void HTMLInputElementImpl::setPlainTextValue(DOMString _value)
+{
+    // When calling to this function you supposedly only do that because it's of
+    // TEXT type. AND it's only called by RenderLineEdit::slotTextChanged() so
+    // there's no need to call to m_render->updateFromElement();
+    m_value = _value;
+    
+    setChanged();
+    if (m_encryptionType != NO_ENCRYPTION) {
+        m_encryptedValueSynced = false;
+    }
+}
+
+DOMString HTMLInputElementImpl::plainTextvalue() const
+{
+    if (m_encryptionType == NO_ENCRYPTION) {
+        return value();
+    } else {
+        return m_value;
+    }
+}
+
+GpgME::Key obtainKeyFromFingerprint(DOMString fingerprint)
+{
+    // Obtain the keys associated with the given fingerprint
+    std::vector<GpgME::Key> keys;
+    Kleo::KeyListJob * job = Kleo::CryptoBackendFactory::instance()->openpgp()->keyListJob( false );
+    job->exec(QStringList(fingerprint.string()), false, keys);
+    
+    if (keys.empty()) {
+        return GpgME::Key::null;
+    }
+    
+    return keys.front();
+}
+
+GpgME::Key HTMLInputElementImpl::encryptionKey()
+{
+    if (!m_PGPEncryptionKeyFingerprint.isEmpty()) {
+        if (m_PGPEncryptionKey.isNull()) {
+            m_PGPEncryptionKey = obtainKeyFromFingerprint(m_PGPEncryptionKeyFingerprint);
+
+            // If obtainKeyFromFingerprint returned null, the encryption key is invalid so set it
+            // to null too
+            if (m_PGPEncryptionKey.isNull()) {
+                m_PGPEncryptionKeyFingerprint = QString();
+            }
+        }
+    }
+    return m_PGPEncryptionKey;
+}
+
+void HTMLInputElementImpl::handleEncryption()
+{
+    if (m_encryptedValueSynced || m_type != TEXT || m_encryptionType != GPG) {
+        return;
+    }
+    
+    if (!m_PGPEncryptionKeyFingerprint.isEmpty()) {
+        if (m_PGPEncryptionKey.isNull()) {
+            m_PGPEncryptionKey = obtainKeyFromFingerprint(m_PGPEncryptionKeyFingerprint);
+
+            // If obtainKeyFromFingerprint returned null, the encryption key is invalid so no
+            // show no encryption for now
+            // TODO: Show a red indicator that lets the user find the key somewhere, using something
+            // like a m_encryptionStatus mmber var
+            if (m_PGPEncryptionKey.isNull()) {
+                m_PGPEncryptionKeyFingerprint = QString();
+                m_encryptionType = NO_ENCRYPTION;
+                return;
+            }
+        }
+        encryptOnly();
+    }
+}
+
+void HTMLInputElementImpl::encryptOnly()
+{    
+    QByteArray plainText = m_value.string().toAscii();
+    const Kleo::CryptoBackend::Protocol * const  backend =
+        Kleo::CryptoBackendFactory::instance()->protocol( GpgME::OpenPGP );
+        
+    QByteArray cipherText; // Here we will receive the cipher text
+    std::vector<GpgME::Key> recipient(1, m_PGPEncryptionKey);
+    
+    std::auto_ptr<Kleo::EncryptJob> encryptJob( backend->encryptJob( /*armor=*/true, /*textmode=*/true ) );
+    Q_ASSERT( encryptJob.get() );
+    encryptJob->setOutputIsBase64Encoded(false);
+    encryptJob->exec(recipient, plainText, true, cipherText);
+    m_encryptedValue = cipherText.data();
+    
+    kDebug() << m_encryptedValue;
+    m_encryptedValueSynced = true;
+}
+
+#endif
+
 void HTMLInputElementImpl::defaultEventHandler(EventImpl *evt)
 {
     if ( !m_disabled )
Index: html/html_elementimpl.cpp
===================================================================
--- html/html_elementimpl.cpp	(revision 1132763)
+++ html/html_elementimpl.cpp	(working copy)
@@ -151,6 +151,14 @@
     case ATTR_NAME:
         document()->incDOMTreeVersion(DocumentImpl::TV_IDNameHref);
         break;
+#ifdef KLEO_SUPPORT
+    case ATTR_ENCRYPTION:
+        if (strcasecmp(attr->value(), "gpg") == 0) {
+            m_encryptionType = GPG;
+        }
+        kDebug(6035) << "making the thing encrypted";
+        break;
+#endif
     case ATTR_CONTENTEDITABLE:
         setContentEditable(attr);
         break;
@@ -507,6 +515,7 @@
 
 void HTMLElementImpl::setInnerHTML( const DOMString &html, int &exceptioncode )
 {
+    kDebug() << html.string();
     if (id() == ID_SCRIPT || id() == ID_STYLE) {
         // Script and CSS source shouldn't be parsed as HTML.
         removeChildren();
@@ -531,6 +540,7 @@
 
 void HTMLElementImpl::setInnerText( const DOMString &text, int& exceptioncode )
 {
+    kDebug(6030) << text.string();
     // following the IE specs.
     if( endTagRequirement(id()) == FORBIDDEN ) {
         exceptioncode = DOMException::NO_MODIFICATION_ALLOWED_ERR;
Index: html/html_blockimpl.h
===================================================================
--- html/html_blockimpl.h	(revision 1132763)
+++ html/html_blockimpl.h	(working copy)
@@ -27,6 +27,7 @@
 #define HTML_BLOCKIMPL_H
 
 #include "html_elementimpl.h"
+#include "../config-khtml.h"
 #include "dtd.h"
 
 namespace DOM {
@@ -40,6 +41,14 @@
         : HTMLGenericElementImpl(doc, _tagid) {}
 
     virtual void parseAttribute(AttributeImpl *token);
+
+#ifdef KLEO_SUPPORT
+    /**
+     * Adds a child node. Used by the parser only. If this DIV element has encryption activated,
+     * we'll then only allow one type of children: TextImpl, and at most only one of them.
+     */
+    virtual NodeImpl *addChild(NodeImpl *newChild);
+#endif
 };
 
 // -------------------------------------------------------------------------
Index: html/html_formimpl.h
===================================================================
--- html/html_formimpl.h	(revision 1132763)
+++ html/html_formimpl.h	(working copy)
@@ -25,6 +25,7 @@
 #ifndef HTML_FORMIMPL_H
 #define HTML_FORMIMPL_H
 
+#include "../config-khtml.h"
 #include "html/html_elementimpl.h"
 #include "html/html_imageimpl.h"
 #include "dom/html_element.h"
@@ -49,6 +50,10 @@
     class Wallet;
 }
 
+namespace GpgME {
+    class Key;
+}
+
 namespace DOM {
 
 class HTMLFormElement;
@@ -292,6 +297,10 @@
 
     DOMString value() const;
     void setValue(DOMString val);
+    
+#ifdef KLEO_SUPPORT
+    GpgME::Key encryptionKey();
+#endif
 
     DOMString valueWithDefault() const;
 
@@ -334,6 +343,24 @@
 protected:
     void parseType(const DOMString& t);
 
+#ifdef KLEO_SUPPORT
+    // Only called by only called by RenderLineEdit::slotTextChanged()
+    void setPlainTextValue(DOMString _value);
+    
+    // Only called by only called by RenderLineEdit::updateFromElement()
+    DOMString plainTextvalue() const;
+    void encryptOnly();
+    //GpgME::Key signingKey();
+    //void encryptAndSign();
+    //void signOnly();
+    void handleEncryption();
+    
+    DOMString m_encryptedValue;
+    DOMString m_PGPEncryptionKeyFingerprint;
+    DOMString m_PGPSigningKeyFingerprint;
+    GpgME::Key m_PGPEncryptionKey;
+    GpgME::Key m_PGPSigningKey;
+#endif
     DOMString m_value;
     int       xPos;
     short     m_maxLen;
@@ -351,6 +378,9 @@
     bool m_autocomplete : 1;
     bool m_inited : 1;
     bool m_unsubmittedFormChange : 1;
+#ifdef KLEO_SUPPORT
+    bool m_encryptedValueSynced : 1;
+#endif
 };
 
 // -------------------------------------------------------------------------
Index: html/htmlparser.cpp
===================================================================
--- html/htmlparser.cpp	(revision 1132763)
+++ html/htmlparser.cpp	(working copy)
@@ -1265,7 +1265,7 @@
         break;
 // text
     case ID_TEXT:
-//        kDebug(6035) << "ID_TEXT: \"" << DOMString(t->text).string() << "\"";
+        kDebug(6035) << "ID_TEXT: \"" << DOMString(t->text).string() << "\"";
         n = new TextImpl(document, t->text);
         break;
     case ID_COMMENT:
Index: rendering/render_form.h
===================================================================
--- rendering/render_form.h	(revision 1132763)
+++ rendering/render_form.h	(working copy)
@@ -24,12 +24,16 @@
 #ifndef RENDER_FORM_H
 #define RENDER_FORM_H
 
+#include "../config-khtml.h"
 #include "rendering/render_replaced.h"
 #include "rendering/render_image.h"
 #include "rendering/render_flow.h"
 #include "rendering/render_style.h"
 #include "khtmlview.h"
 #include "html/html_formimpl.h"
+#ifdef KLEO_SUPPORT
+#include "ui_securitytooltip.h"
+#endif
 
 class QWidget;
 
@@ -37,6 +41,8 @@
 #include <kurlrequester.h>
 #include <klineedit.h>
 #include <QtGui/QCheckBox>
+#include <QtGui/QWidget>
+#include <QtGui/QFrame>
 #include <QtGui/QRadioButton>
 #include <QtGui/QPushButton>
 #include <klistwidget.h>
@@ -292,6 +298,7 @@
 
 // -------------------------------------------------------------------------
 
+class SecurityWidget;
 class LineEditWidget : public KLineEdit, public KHTMLWidget
 {
     Q_OBJECT
@@ -308,6 +315,9 @@
     virtual void mouseMoveEvent(QMouseEvent *e);
     virtual void contextMenuEvent(QContextMenuEvent *e);
 private Q_SLOTS:
+#ifdef KLEO_SUPPORT
+    void updateSecurityWidgetLocation();
+#endif
     void clearHistoryActivated();
     void slotCheckSpelling();
     void slotSpellCheckDone( const QString &s );
@@ -323,6 +333,9 @@
     DOM::HTMLInputElementImpl* m_input;
     KHTMLView* m_view;
     KAction *m_spellAction;
+#ifdef KLEO_SUPPORT
+    SecurityWidget *m_securityWidget;
+#endif
 };
 
 // -------------------------------------------------------------------------
@@ -558,6 +571,42 @@
     ScrollBarWidget( Qt::Orientation orientation, QWidget * parent = 0 ): QScrollBar(orientation, parent) { m_kwp->setIsRedirected( true ); }
 };
 
+
+#ifdef KLEO_SUPPORT
+/**
+ * Shows a security widget when clicking in the padlock icon in an encrypted input type text.
+ */
+class SecurityTooltip : public QFrame
+{
+    Q_OBJECT
+public:
+    SecurityTooltip(LineEditWidget *parentLineEdit, DOM::HTMLInputElementImpl *input);
+    void sizeAndPosition();
+    void updateUi();
+    
+public Q_SLOTS:
+    void popup();
+
+protected:
+
+    /**
+     * The preferred global coordinate at which the completion box's top left corner
+     * should be positioned.
+     */
+    virtual QPoint globalPositionHint() const;
+
+    /** 
+     * In focus out hide the tooltip.
+     */
+    void focusOutEvent(QFocusEvent *event);
+    
+private:
+    LineEditWidget *m_parent;
+    DOM::HTMLInputElementImpl *m_input;
+    Ui::SecurityToolTip ui;
+};
+#endif
+
 } //namespace
 
 #endif
Index: rendering/securitytooltip.ui
===================================================================
--- rendering/securitytooltip.ui	(revision 0)
+++ rendering/securitytooltip.ui	(revision 0)
@@ -0,0 +1,176 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>SecurityToolTip</class>
+ <widget class="QWidget" name="SecurityToolTip">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>440</width>
+    <height>206</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>Form</string>
+  </property>
+  <widget class="QLabel" name="shieldIcon">
+   <property name="geometry">
+    <rect>
+     <x>8</x>
+     <y>10</y>
+     <width>50</width>
+     <height>50</height>
+    </rect>
+   </property>
+   <property name="lineWidth">
+    <number>0</number>
+   </property>
+  </widget>
+  <widget class="QLabel" name="messagesLabel">
+   <property name="geometry">
+    <rect>
+     <x>71</x>
+     <y>30</y>
+     <width>281</width>
+     <height>41</height>
+    </rect>
+   </property>
+   <property name="font">
+    <font>
+     <pointsize>10</pointsize>
+    </font>
+   </property>
+   <property name="text">
+    <string>Messages will be sent encrypted to:</string>
+   </property>
+   <property name="wordWrap">
+    <bool>true</bool>
+   </property>
+  </widget>
+  <widget class="QLabel" name="nameLabel">
+   <property name="geometry">
+    <rect>
+     <x>71</x>
+     <y>56</y>
+     <width>231</width>
+     <height>31</height>
+    </rect>
+   </property>
+   <property name="font">
+    <font>
+     <pointsize>11</pointsize>
+    </font>
+   </property>
+   <property name="styleSheet">
+    <string notr="true">color: rgb(0, 85, 0);</string>
+   </property>
+   <property name="text">
+    <string>Name Lastname Lastname</string>
+   </property>
+   <property name="wordWrap">
+    <bool>false</bool>
+   </property>
+  </widget>
+  <widget class="QLabel" name="emailLabel">
+   <property name="geometry">
+    <rect>
+     <x>72</x>
+     <y>69</y>
+     <width>231</width>
+     <height>41</height>
+    </rect>
+   </property>
+   <property name="font">
+    <font>
+     <pointsize>11</pointsize>
+    </font>
+   </property>
+   <property name="styleSheet">
+    <string notr="true">color: rgb(0, 0, 255);</string>
+   </property>
+   <property name="text">
+    <string>email@server.com</string>
+   </property>
+   <property name="wordWrap">
+    <bool>true</bool>
+   </property>
+  </widget>
+  <widget class="QLabel" name="detailsLabel">
+   <property name="geometry">
+    <rect>
+     <x>71</x>
+     <y>110</y>
+     <width>251</width>
+     <height>61</height>
+    </rect>
+   </property>
+   <property name="font">
+    <font>
+     <pointsize>10</pointsize>
+    </font>
+   </property>
+   <property name="text">
+    <string>Fingerprint: &lt;b&gt;XXXXXXX&lt;/b&gt;&lt;br/&gt;Owner trust: &lt;b style=&quot;color:#005500;&quot;&gt;Full&lt;/b&gt;&lt;br/&gt;State: &lt;b style=&quot;color:#005500;&quot;&gt;Full&lt;/b&gt;</string>
+   </property>
+   <property name="textFormat">
+    <enum>Qt::AutoText</enum>
+   </property>
+   <property name="wordWrap">
+    <bool>true</bool>
+   </property>
+  </widget>
+  <widget class="QLabel" name="receiverLabel">
+   <property name="geometry">
+    <rect>
+     <x>71</x>
+     <y>0</y>
+     <width>251</width>
+     <height>41</height>
+    </rect>
+   </property>
+   <property name="font">
+    <font>
+     <pointsize>10</pointsize>
+    </font>
+   </property>
+   <property name="text">
+    <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Sans Serif'; font-size:10pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-weight:600;&quot;&gt;Recipient&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+   </property>
+   <property name="wordWrap">
+    <bool>true</bool>
+   </property>
+  </widget>
+  <widget class="QLabel" name="ownerTrustIcon">
+   <property name="geometry">
+    <rect>
+     <x>41</x>
+     <y>129</y>
+     <width>21</width>
+     <height>21</height>
+    </rect>
+   </property>
+   <property name="lineWidth">
+    <number>0</number>
+   </property>
+  </widget>
+  <widget class="QLabel" name="stateIcon">
+   <property name="geometry">
+    <rect>
+     <x>41</x>
+     <y>146</y>
+     <width>21</width>
+     <height>21</height>
+    </rect>
+   </property>
+   <property name="lineWidth">
+    <number>0</number>
+   </property>
+  </widget>
+ </widget>
+ <resources/>
+ <connections/>
+</ui>
Index: rendering/render_line.cpp
===================================================================
--- rendering/render_line.cpp	(revision 1132763)
+++ rendering/render_line.cpp	(working copy)
@@ -982,6 +982,15 @@
     if (object()->style()->htmlHacks() || object()->style()->visibility() != VISIBLE)
         return;
 
+#ifdef KLEO_SUPPORT
+    if (firstChild()->isInlineTextBox()) {
+        InlineTextBox* inlineTextBox = static_cast<InlineTextBox*>(firstChild());
+        if (inlineTextBox->renderText()->element()->isEncrypted()) {
+            return;
+        }
+    }
+#endif
+
     _tx += m_x;
     _ty += m_y;
     RenderStyle* styleToUse = object()->style(m_firstLine);
Index: rendering/render_box.cpp
===================================================================
--- rendering/render_box.cpp	(revision 1132763)
+++ rendering/render_box.cpp	(working copy)
@@ -46,12 +46,14 @@
 #include "xml/dom_docimpl.h"
 #include "xml/dom2_eventsimpl.h"
 #include "html/html_elementimpl.h"
+#include "../config-khtml.h" // For KLEO_SUPPORT
 
 #include <QWheelEvent>
 #include <khtmlview.h>
 #include <kdebug.h>
 #include <kglobal.h>
 #include <assert.h>
+#include "render_text.h"
 
 
 using namespace DOM;
@@ -377,7 +379,8 @@
 
 void RenderBox::paintRootBoxDecorations(PaintInfo& paintInfo, int _tx, int _ty)
 {
-    //kDebug( 6040 ) << renderName() << "::paintRootBoxDecorations()" << _tx << "/" << _ty;
+//     kDebug( 6040 ) << renderName() << style()->backgroundColor();
+
     const BackgroundLayer* bgLayer = style()->backgroundLayers();
     QColor bgColor = style()->backgroundColor();
     if (document()->isHTMLDocument() && !style()->hasBackground()) {
@@ -425,13 +428,18 @@
     QRect cr = paintInfo.r.intersected(QRect(bx, by, bw, bh));
     paintAllBackgrounds(paintInfo.p, bgColor, bgLayer, cr, bx, by, bw, bh);
 
+
+#ifdef KLEO_SUPPORT
+//     kDebug(6040) << "1";
+#endif
+    
     if(style()->hasBorder())
         paintBorder( paintInfo.p, _tx, _ty, w, h, style() );
 }
 
 void RenderBox::paintBoxDecorations(PaintInfo& paintInfo, int _tx, int _ty)
 {
-    //kDebug( 6040 ) << renderName() << "::paintDecorations()";
+    kDebug( 6040 ) << renderName() <<  style()->backgroundColor();
 
     if(isRoot())
         return paintRootBoxDecorations(paintInfo, _tx, _ty);
@@ -448,7 +456,27 @@
    if (!isBody() || !document()->isHTMLDocument() || document()->documentElement()->renderer()->style()->hasBackground())
         paintAllBackgrounds(paintInfo.p, style()->backgroundColor(), style()->backgroundLayers(), cr, _tx, _ty, w, h);
 
-    if(style()->hasBorder()) {
+   bool border = style()->hasBorder(); 
+   if (element() && element()->firstChild() && element()->firstChild()->isTextNode()) {
+        TextImpl* textImpl = static_cast<TextImpl*>(this->element()->firstChild());
+        if (textImpl->isEncrypted()) {
+            QColor borderColor(65,255,64);
+            style()->setBorderBottomColor(borderColor);
+            style()->setBorderTopColor(borderColor);
+            style()->setBorderLeftColor(borderColor);
+            style()->setBorderLeftColor(borderColor);
+            style()->setBorderBottomWidth(2);
+            style()->setBorderTopWidth(2);
+            style()->setBorderLeftWidth(2);
+            style()->setBorderRightWidth(2);
+            style()->setBorderBottomStyle(SOLID);
+            style()->setBorderTopStyle(SOLID);
+            style()->setBorderLeftStyle(SOLID);
+            style()->setBorderRightStyle(SOLID);
+            border = true;
+        }
+    }
+    if(border) {
         paintBorder(paintInfo.p, _tx, _ty, w, h, style());
     }
 }
@@ -462,6 +490,12 @@
 
 void RenderBox::paintOneBackground(QPainter *p, const QColor& c, const BackgroundLayer* bgLayer, QRect clipr, int _tx, int _ty, int w, int height)
 {
+    if (element() && element()->firstChild() && element()->firstChild()->isTextNode()) {
+        TextImpl* textImpl = static_cast<TextImpl*>(element()->firstChild());
+        if (textImpl->isEncrypted()) {
+            style()->setBackgroundColor(Qt::white);
+        }
+    }
     paintBackgroundExtended(p, c, bgLayer, clipr, _tx, _ty, w, height,
                             borderLeft(), borderRight(), paddingLeft(), paddingRight(),
                             borderTop(), borderBottom(), paddingTop(), paddingBottom());
Index: rendering/render_form.cpp
===================================================================
--- rendering/render_form.cpp	(revision 1132763)
+++ rendering/render_form.cpp	(working copy)
@@ -54,7 +54,9 @@
 #include <kbuildsycocaprogressdialog.h>
 #include <kservicetypetrader.h>
 #include <kservice.h>
+#include <kglobalsettings.h>
 
+#include <QTimer>
 #include <QAbstractItemView>
 #include <QAbstractTextDocumentLayout>
 #include <QtGui/QStyle>
@@ -697,8 +699,224 @@
     }
 };
 
+#ifdef KLEO_SUPPORT
+SecurityTooltip::SecurityTooltip(LineEditWidget *parentLineEdit, DOM::HTMLInputElementImpl *input)
+    : QFrame(parentLineEdit), m_parent(parentLineEdit), m_input(input)
+{
+    ui.setupUi(this);
+    setWindowFlags(Qt::Popup);
+    setFrameStyle(QFrame::StyledPanel | QFrame::Raised);
+    hide();
+    
+    //TODO: Connect More Details.. button to show dialog when implemented
 }
 
+void SecurityTooltip::popup()
+{
+    if (!isVisible()) {
+        kDebug();
+        sizeAndPosition();
+        updateUi();
+        show();
+//         ui.moreInfoButton->setFocus(Qt::PopupFocusReason);
+    }
+}
+
+void SecurityTooltip::updateUi()
+{
+    int overallSecurity = 2; // o means low, 1 means medium, 2 means high
+    ui.messagesLabel->setText(i18n("Messages will be sent encrypted to:"));
+    GpgME::Key key = m_input->encryptionKey();
+    ui.nameLabel->setText(key.userID(0).name());
+    ui.emailLabel->setText(key.userID(0).email());
+    
+    QString shortKeyID = key.shortKeyID();
+    QPixmap ownerTrustIcon;
+    QString color1;
+    QString ownerTrustString;
+    int ownerTrust = key.ownerTrust();
+    if (key.hasSecret()) {
+        ownerTrust = GpgME::Key::Ultimate;
+    }
+    switch(ownerTrust) {
+        case GpgME::Key::Ultimate:
+            color1 = "#005500";
+            ownerTrustIcon = SmallIcon("security-high");
+            ownerTrustString = "Ultimate";
+            break;
+        case GpgME::Key::Full:
+            color1 = "#005500";
+            ownerTrustIcon= SmallIcon("security-high");
+            ownerTrustString = "Full";
+            break;
+        case GpgME::Key::Marginal:
+            overallSecurity = 1;
+            color1 = "#005500";
+            ownerTrustIcon = SmallIcon("security-medium");
+            ownerTrustString = "Marginal";
+            break;
+        case GpgME::Key::Never:
+            overallSecurity = 0;
+            color1 = "#005500";
+            ownerTrustIcon = SmallIcon("security-low");
+            ownerTrustString = "Never";
+            break;
+        case GpgME::Key::Unknown:
+        default:
+            overallSecurity = 1;
+            color1 = "#005500";
+            ownerTrustIcon = SmallIcon("security-medium"); // TODO: get a proper icon for that, ask oxygen people for "security-unkown" icon
+            ownerTrustString = "Unknown";
+            break;
+    }
+    
+    QString color2;
+    QString stateString;
+    QPixmap stateIcon = SmallIcon("security-low");
+    if (key.isExpired()) {
+        overallSecurity = 0;
+        color2 = "#aa0000";
+        stateString = i18n("Expired");
+    } else if (key.isInvalid()) {
+        overallSecurity = 0;
+        color2 = "#aa0000";
+        stateString = i18n("Invalid");
+    } else if (key.isRevoked()) {
+        overallSecurity = 0;
+        color2 = "#aa0000";
+        stateString = i18n("Revoked");
+    } else if (key.isDisabled()) {
+        overallSecurity = 0;
+        color2 = "#aa0000";
+        stateString = i18n("Disabled");
+        overallSecurity = 0;
+    } else {
+        stateIcon = SmallIcon("security-high");
+        color2 = "#005500";
+        stateString = "Valid";
+    }
+    
+    ui.ownerTrustIcon->setPixmap(ownerTrustIcon);
+    ui.stateIcon->setPixmap(stateIcon);
+    QString detailsString = i18n("Fingerprint: &lt;b&gt;%1&lt;/b&gt;&lt;br/&gt;Owner trust: &lt;b style=\"color:%2;\"&gt;%3&lt;/b&gt;&lt;br/&gt;State: &lt;b style=\"color:%4;\"&gt;%5&lt;/b&gt;",
+        shortKeyID, color1, ownerTrustString, color2, stateString);
+    ui.detailsLabel->setText(detailsString);
+    
+    QString securityPixmapName = "security-high";
+    if (overallSecurity == 1) {
+        securityPixmapName = "security-medium";
+    } else if (overallSecurity == 0) {
+        securityPixmapName = "security-low";
+    }
+    ui.shieldIcon->setPixmap(KIconLoader::global()->loadIcon(securityPixmapName, 
+        KIconLoader::Desktop, KIconLoader::SizeLarge));
+}
+
+void SecurityTooltip::sizeAndPosition()
+{
+    resize(QSize(365, 206));
+
+    QRect screenSize = KGlobalSettings::desktopGeometry(m_parent);
+    QPoint globalPos = globalPositionHint();
+    move(globalPos.x(), globalPos.y());
+}
+
+/**
+    * The preferred global coordinate at which the completion box's top left corner
+    * should be positioned.
+    */
+QPoint SecurityTooltip::globalPositionHint() const
+{
+    Q_ASSERT(m_parent != 0);
+    
+    QPoint dest;
+    KHTMLView* v = m_parent->m_kwp->rootViewPos(dest);
+    QPoint ret;
+    if (v) {
+        ret = v->mapToGlobal( dest + QPoint(0, m_parent->height()) );
+        int zoomLevel = v->zoomLevel();
+        if (zoomLevel != 100) {
+            ret.setX( ret.x()*zoomLevel/100 );
+            ret.setY( ret.y()*zoomLevel/100 );
+        }
+    }
+    return ret;
+}
+
+void SecurityTooltip::focusOutEvent(QFocusEvent *event)
+{
+    kDebug();
+    hide();
+}
+
+///////////////
+
+/**
+  * Shows the security icon(s) in a LineEditWidget for an input type text which
+  * is encrypted i.e. one which sends its contents cyphered with GPG. It also
+  * shows information details about the certificates being used on mouse over 
+  * and when clicked.
+  * @internal
+  */
+class SecurityWidget : public QWidget
+{
+public:
+    friend class SecurityTooltip;
+    SecurityWidget(DOM::HTMLInputElementImpl *input, LineEditWidget *parent)
+        : QWidget(parent), m_mouseOver(false), 
+        m_encryptedPixmap(SmallIcon("document-encrypt")), m_input(input),
+        m_tooltip(new SecurityTooltip(parent, input))
+    {
+        setMouseTracking(true);
+    }
+
+    QSize sizeHint() const
+    {
+        return m_encryptedPixmap.size();
+    }
+
+    void paintEvent(QPaintEvent *event)
+    {
+        QPainter p(this);
+        
+        if (m_mouseOver) {
+            p.setOpacity(0.7);
+        } else {
+            p.setOpacity(1);
+        }
+        p.drawPixmap( 0, 0, m_encryptedPixmap );
+        p.end();    
+    }
+    
+protected:
+    void enterEvent(QEvent *event)
+    {
+        m_mouseOver = true;
+        update();
+    }
+    
+    void leaveEvent(QEvent *event)
+    {
+        m_mouseOver = false;
+        update();
+    }
+    
+    void mouseReleaseEvent(QMouseEvent *event)
+    {
+        kDebug();
+        m_tooltip->popup();
+    }
+
+private:
+    bool m_mouseOver;
+    QPixmap m_encryptedPixmap;
+    DOM::HTMLInputElementImpl *m_input;
+    SecurityTooltip *m_tooltip;
+};
+#endif
+
+}
+
 LineEditWidget::LineEditWidget(DOM::HTMLInputElementImpl* input, KHTMLView* view, QWidget* parent)
     : KLineEdit(parent), m_input(input), m_view(view)
 {
@@ -710,12 +928,46 @@
     setCompletionBox( new CompletionWidget( this ) );
     completionBox()->setObjectName("completion box");
     completionBox()->setFont(font());
+    
+#ifdef KLEO_SUPPORT
+    // If widget is encrypted add the encrypted icon
+    if (m_input->isEncrypted()) {
+        m_securityWidget = new khtml::SecurityWidget(input, this);
+        
+        // Readjust lineedit text margins so that they don't collide with the
+        // security widget
+        int left, right, top, bottom;
+        getTextMargins(&left, &top, &right, &bottom);
+        left += m_securityWidget->sizeHint().width();
+        setTextMargins(left, top, right, bottom); 
+        
+        // Update location after some minimal time or else it will be relocated
+        // in (0, 0) which is not what we want
+        updateSecurityWidgetLocation();
+    } else {
+        m_securityWidget = 0;
+    }
 }
+#endif
 
 LineEditWidget::~LineEditWidget()
 {
 }
 
+#ifdef KLEO_SUPPORT
+void LineEditWidget::updateSecurityWidgetLocation()
+{
+        // Reposition the security widget
+        QStyleOptionFrameV2 opt;
+        initStyleOption(&opt);
+        QRect textRect = style()->subElementRect(QStyle::SE_LineEditContents, &opt, this);
+        int midHeight = textRect.center().y();
+        int topHeight = midHeight - SmallIcon("document-encrypt").height() / 2 - 1;
+        m_securityWidget->move(textRect.x(), topHeight);
+        update();
+}
+#endif
+
 void LineEditWidget::slotCheckSpelling()
 {
     if ( text().isEmpty() ) {
@@ -945,8 +1197,16 @@
         popup->addAction( m_spellAction );
         m_spellAction->setEnabled( !text().isEmpty() );
     }
-    if ( !m_view->part()->onlyLocalReferences() ) {
+#ifdef KLEO_SUPPORT
+    if (m_input->isEncrypted()) {
         popup->addSeparator();
+    // If widget is encrypted then it doesn't make sense to create a web
+    // shortcut for it.
+    } else if (!m_view->part()->onlyLocalReferences()) {
+#else
+    if (!m_view->part()->onlyLocalReferences()) {
+#endif
+        popup->addSeparator();
         QAction *act = popup->addAction( i18n("Create Web Shortcut") );
         connect(act, SIGNAL(triggered()),
                 this, SLOT(slotCreateWebShortcut()));
@@ -968,6 +1228,19 @@
 
 void LineEditWidget::paintEvent( QPaintEvent *pe )
 {
+#ifdef KLEO_SUPPORT
+    // Secure the visualization of the widget for the user if the widget is
+    // "secure" i.e. sends encrypted data
+    if (m_input->isEncrypted()) {
+        QPainter p(this);
+            
+        // Change background color to yellow
+        QColor color(245, 246, 190);
+        QPalette pal = palette();
+        pal.setBrush(QPalette::Base, color);
+        setPalette(pal);
+    }
+#endif
     if (!hasFrame()) {
         QPainter p(this);
         p.fillRect(pe->rect(), palette().brush(QPalette::Base));
@@ -1142,11 +1415,20 @@
         widget()->setMaxLength( ml );
     }
 
+    // don't use value() here!
+    #ifdef KLEO_SUPPORT
+    if (element()->plainTextvalue().string() != widget()->text()) {
+        int pos = widget()->cursorPosition();
+        widget()->setText(element()->plainTextvalue().string());
+        widget()->setCursorPosition(pos);
+    }
+    #else
     if (element()->value().string() != widget()->text()) {
         int pos = widget()->cursorPosition();
         widget()->setText(element()->value().string());
         widget()->setCursorPosition(pos);
     }
+    #endif
     widget()->setReadOnly(element()->readOnly());
 
     RenderFormElement::updateFromElement();
@@ -1155,7 +1437,11 @@
 void RenderLineEdit::slotTextEdited(const QString &string)
 {
     // don't use setValue here!
+    #ifdef KLEO_SUPPORT
+    element()->setPlainTextValue(string);
+    #else
     element()->m_value = string;
+    #endif
     element()->m_unsubmittedFormChange = true;
 }
 
Index: rendering/render_object.cpp
===================================================================
--- rendering/render_object.cpp	(revision 1132763)
+++ rendering/render_object.cpp	(working copy)
@@ -1514,6 +1514,8 @@
 
 void RenderObject::paintBorder(QPainter *p, int _tx, int _ty, int w, int h, const RenderStyle* style, bool begin, bool end)
 {
+    kDebug(6040) << style->borderTopColor() << style->borderRightColor();
+    
     const QColor& tc = style->borderTopColor();
     const QColor& bc = style->borderBottomColor();
     const QColor& lc = style->borderLeftColor();
Index: rendering/render_text.cpp
===================================================================
--- rendering/render_text.cpp	(revision 1132763)
+++ rendering/render_text.cpp	(working copy)
@@ -59,6 +59,7 @@
 #    include <stdlib.h>
 #  endif
 #endif
+#include "../config-khtml.h" // For KLEO_SUPPORT
 
 using namespace khtml;
 using namespace DOM;
@@ -141,6 +142,7 @@
 
 void InlineTextBox::paint(RenderObject::PaintInfo& i, int tx, int ty)
 {
+
     if (object()->isBR() || object()->style()->visibility() != VISIBLE ||
         m_truncation == cFullTruncation || i.phase == PaintActionOutline)
         return;
@@ -154,8 +156,21 @@
     if ((xPos >= i.r.x() + i.r.width()) || (xPos + w <= i.r.x()))
         return;
 
+
     // Set our font.
     RenderStyle* styleToUse = object()->style(m_firstLine);
+#ifdef KLEO_SUPPORT
+    // Check if it needs to be secure
+    bool security = false;
+//     kDebug(6040) << "is encrypted?? " << renderText() << renderText()->element()
+//         << renderText()->element()->isEncrypted() << renderText()->string()->string();
+    if (renderText() && renderText()->element() && renderText()->element()->isEncrypted()) {
+        kDebug(6040) << "is encrypted";
+        security = true;
+        styleToUse->setTextShadow(0);
+        styleToUse->setColor(Qt::black);
+    }
+#endif
     int d = styleToUse->textDecorationsInEffect();
     if (styleToUse->font() != i.p->font())
         i.p->setFont(styleToUse->font());
@@ -679,14 +694,14 @@
     m_isSimpleText = false;
     m_firstTextBox = m_lastTextBox = 0;
 
-#ifdef DEBUG_LAYOUT
-    const QString cstr = QString::fromRawData(str->s, str->l);
-    kDebug( 6040 ) << "RenderText ctr( "<< cstr.length() << " )  '" << cstr << "'";
-#endif
+    if (str) {
+        kDebug(6040) << str->string();
+    }
 }
 
 void RenderText::setStyle(RenderStyle *_style)
 {
+    kDebug(6040);
     if ( style() != _style ) {
         bool changedText = ((!style() && ( _style->textTransform() != TTNONE ||
                                            !_style->preserveLF() || !_style->preserveWS() )) ||
@@ -698,8 +713,10 @@
 
         if (!isBR() && changedText) {
             DOM::DOMStringImpl* textToTransform = originalString();
-            if (textToTransform)
+            if (textToTransform) {
+                kDebug(6040) << "setText";
                 setText(textToTransform, true);
+            }
         }
     }
 }
@@ -804,7 +821,11 @@
 
 DOM::DOMStringImpl* RenderText::originalString() const
 {
+#ifdef KLEO_SUPPORT
+    return element() ? element()->plainTextvalue() : 0;
+#else
     return element() ? element()->string() : 0;
+#endif
 }
 
 const InlineTextBox * RenderText::findInlineTextBox( int offset, int &pos, bool checkFirstLetter ) const
@@ -1381,6 +1402,7 @@
 
 void RenderText::setText(DOMStringImpl *text, bool force)
 {
+    kDebug(6040) << text->string();
     if( !force && str == text ) return;
 
     DOMStringImpl *oldstr = str;
Index: rendering/render_block.cpp
===================================================================
--- rendering/render_block.cpp	(revision 1132763)
+++ rendering/render_block.cpp	(working copy)
@@ -1775,10 +1775,20 @@
     // If we're a repositioned run-in, don't paint background/borders.
     bool inlineFlow = isInlineFlow();
 
+#ifdef KLEO_SUPPORT
+    bool forcePaintBackground = false;
+    if (element() && element()->firstChild() && element()->firstChild()->isTextNode()) {
+        TextImpl* textImpl = static_cast<TextImpl*>(this->element()->firstChild());
+        if (textImpl->isEncrypted()) {
+            forcePaintBackground = true;
+        }
+    }
+#endif
+
     // 1. paint background, borders etc
     if (!inlineFlow &&
         (pI.phase == PaintActionElementBackground || pI.phase == PaintActionChildBackground ) &&
-         shouldPaintBackgroundOrBorder() && style()->visibility() == VISIBLE)
+         (forcePaintBackground || shouldPaintBackgroundOrBorder() && style()->visibility() == VISIBLE))
         paintBoxDecorations(pI, _tx, _ty);
 
     if ( pI.phase == PaintActionElementBackground )
Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revision 1132763)
+++ CMakeLists.txt	(working copy)
@@ -10,8 +10,6 @@
 add_definitions(-DWTF_PLATFORM_QT)
 ########svg#########
 
-add_subdirectory( tests )
-
 find_package(JPEG)
 macro_log_feature(JPEG_FOUND "libjpeg" "A library for reading and writing JPEG image files" "http://www.ijg.org" TRUE "" "Required by khtml.")
 
@@ -19,8 +17,18 @@
 macro_log_feature(GIF_FOUND "giflib" "A library for manipulating GIF format image files" "http://sourceforge.net/projects/giflib" TRUE "" "Required by khtml.")
 
 find_package(PNG)
-macro_log_feature(PNG_FOUND "libpng" "A library for manipulating PNG image format files" "http://www.libpng.org/pub/png" TRUE "" "Required by khtml.")
+macro_log_feature(PNG_FOUND "libpng" "A KDEPIM library for manipulating PNG image format files" "http://www.libpng.org/pub/png" TRUE "" "Required by khtml.")
 
+find_package(Gpgmepp)
+find_package(Kleo)
+if(KLEO_INCLUDES)
+    set(KLEO_SUPPORT 1)
+endif(KLEO_INCLUDES)
+macro_log_feature(GPGMEPP_INCLUDES "gpgme++" "A library for encryption handling" "http://www.kdab.net" TRUE "" "Optional for khtml.")
+macro_log_feature(KLEO_SUPPORT "libkleo" "A library for encryption handling" "http://www.kde.org" TRUE "" "Optional for khtml.")
+
+add_subdirectory( tests )
+
 set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  ${KDE4_ENABLE_EXCEPTIONS}")
 
 configure_file(config-khtml.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-khtml.h )
@@ -350,6 +358,9 @@
   ${CMAKE_SOURCE_DIR}/khtml/rendering/media_controls.cpp
 )
 
+kde4_add_ui_files(khtmlrender_STAT_SRCS ${CMAKE_SOURCE_DIR}/khtml/rendering/securitytooltip.ui)
+kde4_add_ui_files(khtmlrender_STAT_SRCS ${CMAKE_SOURCE_DIR}/khtml/rendering/encryptiondetails.ui)
+
 # khtml/css/Makefile.am: khtmlcss
 
 set(khtmlcss_STAT_SRCS
@@ -437,6 +448,7 @@
 add_subdirectory( pics )
 add_subdirectory( ecma )
 
+include_directories( ${KLEO_INCLUDES} ${GPGMEPP_INCLUDES} )
 include_directories( ${KDE4_PHONON_INCLUDES} ${KDE4_KPARTS_INCLUDES} )
 include_directories( ${CMAKE_BINARY_DIR}/kio/kssl )
 include_directories( ${KDE4_KJS_INCLUDES} ${CMAKE_SOURCE_DIR}/kimgio ${CMAKE_SOURCE_DIR}/kio/kssl ${CMAKE_SOURCE_DIR}/interfaces ${CMAKE_SOURCE_DIR}/interfaces/kregexpeditor)
@@ -534,8 +546,8 @@
 
 kde4_add_library(khtml SHARED ${khtml_LIB_SRCS})
 
-target_link_libraries(khtml ${KDE4_KPARTS_LIBS} ktexteditor kjs ${KDE4_PHONON_LIBS} ${JPEG_LIBRARIES} ${GIF_LIBRARIES} ${PNG_LIBRARIES} ${X11_LIBRARIES})
-target_link_libraries(khtml LINK_INTERFACE_LIBRARIES kparts kjs kio kdeui kdecore ${QT_QTCORE_LIBRARY} ${QT_QTGUI_LIBRARY} )
+target_link_libraries(khtml ${KDE4_KPARTS_LIBS} ktexteditor kjs ${KDE4_PHONON_LIBS} ${KLEO_LIBRARIES} ${GPGMEPP_VANILLA_LIBRARIES} ${JPEG_LIBRARIES} ${GIF_LIBRARIES} ${PNG_LIBRARIES} ${X11_LIBRARIES})
+target_link_libraries(khtml LINK_INTERFACE_LIBRARIES kparts kjs kio kdeui kdecore ${QT_QTCORE_LIBRARY} ${QT_QTGUI_LIBRARY})
 
 set_target_properties(khtml PROPERTIES VERSION ${KDE_NON_GENERIC_LIB_VERSION}
                                        SOVERSION ${KDE_NON_GENERIC_LIB_SOVERSION}
Index: xml/dom_textimpl.cpp
===================================================================
--- xml/dom_textimpl.cpp	(revision 1132763)
+++ xml/dom_textimpl.cpp	(working copy)
@@ -25,6 +25,7 @@
 #include "dom_textimpl.h"
 #include "dom2_eventsimpl.h"
 #include "dom_docimpl.h"
+#include "../html/html_blockimpl.h"
 #include <dom/dom_exception.h>
 #include <css/cssstyleselector.h>
 
@@ -36,6 +37,17 @@
 
 #include <kdebug.h>
 
+#ifdef KLEO_SUPPORT
+#include <kleo/cryptobackendfactory.h>
+#include <kleo/cryptobackend.h>
+#include <kleo/decryptjob.h>
+
+#include <gpgme++/key.h>
+#include <gpgme++/decryptionresult.h>
+#include "../html/html_blockimpl.h"
+#include "../khtml_ext.h"
+#endif
+
 // for SVG
 #include <rendering/RenderSVGInlineText.h>
 
@@ -52,6 +64,8 @@
 {
     str = _text ? _text : new DOMStringImpl((QChar*)0, 0);
     str->ref();
+    m_plainTextValue = 0;
+    kDebug(6035) << str->string();
 }
 
 CharacterDataImpl::~CharacterDataImpl()
@@ -67,6 +81,13 @@
         return;
     }
 
+#ifdef KLEO_SUPPORT
+    if (isEncrypted()) {
+        exceptioncode = DOMException::NO_MODIFICATION_ALLOWED_ERR;
+        return;
+    }
+#endif
+
     if(str == _data.impl) return; // ### fire DOMCharacterDataModified if modified?
     DOMStringImpl *oldStr = str;
     str = _data.impl;
@@ -74,7 +95,11 @@
         str = new DOMStringImpl((QChar*)0, 0);
     str->ref();
     if (m_render)
+#ifdef KLEO_SUPPORT
+      (static_cast<RenderText*>(m_render))->setText(plainTextvalue());
+#else
       (static_cast<RenderText*>(m_render))->setText(str);
+#endif
     setChanged(true);
 
     dispatchModifiedEvent(oldStr);
@@ -109,12 +134,23 @@
         return;
     }
 
+#ifdef KLEO_SUPPORT
+    if (isEncrypted()) {
+        exceptioncode = DOMException::NO_MODIFICATION_ALLOWED_ERR;
+        return;
+    }
+#endif
+
     DOMStringImpl *oldStr = str;
     str = str->copy();
     str->ref();
     str->append(arg.impl);
     if (m_render)
+#ifdef KLEO_SUPPORT
+      (static_cast<RenderText*>(m_render))->setText(plainTextvalue());
+#else
       (static_cast<RenderText*>(m_render))->setText(str);
+#endif
     setChanged(true);
 
     dispatchModifiedEvent(oldStr);
@@ -133,7 +169,11 @@
     str->ref();
     str->insert(arg.impl, offset);
     if (m_render)
+#ifdef KLEO_SUPPORT
+      (static_cast<RenderText*>(m_render))->setText(plainTextvalue());
+#else
       (static_cast<RenderText*>(m_render))->setText(str);
+#endif
     setChanged(true);
 
     dispatchModifiedEvent(oldStr);
@@ -155,7 +195,11 @@
     str->ref();
     str->remove(offset,count);
     if (m_render)
+#ifdef KLEO_SUPPORT
+      (static_cast<RenderText*>(m_render))->setText(plainTextvalue());
+#else
       (static_cast<RenderText*>(m_render))->setText(str);
+#endif
     setChanged(true);
 
     dispatchModifiedEvent(oldStr);
@@ -184,7 +228,11 @@
     str->remove(offset,realCount);
     str->insert(arg.impl, offset);
     if (m_render)
+#ifdef KLEO_SUPPORT
+      (static_cast<RenderText*>(m_render))->setText(plainTextvalue());
+#else
       (static_cast<RenderText*>(m_render))->setText(str);
+#endif
     setChanged(true);
 
     dispatchModifiedEvent(oldStr);
@@ -248,8 +296,58 @@
         exceptioncode = DOMException::NO_MODIFICATION_ALLOWED_ERR;
         return;
     }
+
+#ifdef KLEO_SUPPORT
+    if (isEncrypted()) {
+        exceptioncode = DOMException::NO_MODIFICATION_ALLOWED_ERR;
+        return;
+    }
+#endif
 }
 
+#ifdef KLEO_SUPPORT
+
+void CharacterDataImpl::decrypt()
+{
+    kDebug(6035);
+    if (isEncrypted()) {
+        kDebug(6035) << "text encrypted";
+        const Kleo::CryptoBackend::Protocol * const  backend =
+                Kleo::CryptoBackendFactory::instance()->protocol(GpgME::OpenPGP);
+        std::auto_ptr<Kleo::DecryptJob> decryptJob(backend->decryptJob());
+        Q_ASSERT(decryptJob.get());
+
+        QByteArray cipherText = str->string().toAscii();
+        QByteArray plainText;
+        GpgME::DecryptionResult res = decryptJob->exec(cipherText, plainText);
+
+        if(plainText.isEmpty()) {
+            kDebug(6035) << "Couldn't decrypt the message";
+            return;
+        }
+        m_plainTextValue = new DOMStringImpl(plainText.constData(), plainText.length());
+        kDebug(6035) << "decrypted text: " << m_plainTextValue->string();
+    } else {
+        kDebug() << "NOT encrypted";
+    }
+}
+
+bool CharacterDataImpl::isEncrypted() const
+{
+    return parentNode() && parentNode()->id() == ID_DIV &&
+        static_cast<HTMLDivElementImpl *>(parentNode())->isEncrypted();
+}
+
+DOMStringImpl *CharacterDataImpl::plainTextvalue() const
+{
+    kDebug();
+    if (isEncrypted() && m_plainTextValue) {
+        return m_plainTextValue;
+    }
+    return str;
+}
+#endif
+
 long CharacterDataImpl::maxOffset() const
 {
   RenderText *r = static_cast<RenderText *>(renderer());
@@ -340,6 +438,13 @@
         return 0;
     }
 
+#ifdef KLEO_SUPPORT
+    if (isEncrypted()) {
+        exceptioncode = DOMException::NO_MODIFICATION_ALLOWED_ERR;
+        return 0;
+    }
+#endif
+
     DOMStringImpl *oldStr = str;
     TextImpl *newText = createNew(str->substring(offset,str->l-offset));
     str = str->copy();
@@ -355,7 +460,11 @@
         return 0;
 
     if (m_render)
-        (static_cast<RenderText*>(m_render))->setText(str);
+#ifdef KLEO_SUPPORT
+      (static_cast<RenderText*>(m_render))->setText(plainTextvalue());
+#else
+      (static_cast<RenderText*>(m_render))->setText(str);
+#endif
     setChanged(true);
     return newText;
 }
@@ -517,7 +626,11 @@
     // for SVG
     if (parentNode()->isSVGElement())
         return new (arena) WebCore::RenderSVGInlineText(this, str);
-    return new (arena) RenderText(this, str);
+#ifdef KLEO_SUPPORT
+      return new (arena) RenderText(this, plainTextvalue());
+#else
+      return new (arena) RenderText(this, str);
+#endif
 }
 
 void TextImpl::attach()
@@ -544,7 +657,12 @@
 	    m_render->setStyle(parentNode()->renderer()->style());
     }
     if ( changed() && m_render && m_render->isText() )
-	static_cast<RenderText*>(m_render)->setText(str);
+#ifdef KLEO_SUPPORT
+      (static_cast<RenderText*>(m_render))->setText(plainTextvalue());
+#else
+      (static_cast<RenderText*>(m_render))->setText(str);
+#endif
+
     setChanged( false );
 }
 
Index: xml/dom_textimpl.h
===================================================================
--- xml/dom_textimpl.h	(revision 1132763)
+++ xml/dom_textimpl.h	(working copy)
@@ -27,16 +27,40 @@
 
 #include "xml/dom_nodeimpl.h"
 #include "dom/dom_string.h"
+#include "../config-khtml.h" // For KLEO_SUPPORT
 
+#ifdef KLEO_SUPPORT
+#include <gpgme++/decryptionresult.h>
+#endif
+
+namespace khtml {
+    class RenderText;
+    class InlineTextBox;
+}
+
+class KHTMLPopupGUIClient;
+
 namespace DOM {
-
     class DocumentImpl;
     class CharacterData;
     class Text;
+    class HTMLDivElementImpl;
 
 class CharacterDataImpl : public NodeImpl
 {
 public:
+#ifdef KLEO_SUPPORT
+    // For decrypt()
+    friend class HTMLDivElementImpl;
+    // For plainTextvalue()
+    friend class khtml::RenderText;
+    friend class khtml::InlineTextBox;
+    friend class KHTMLPopupGUIClient;
+
+    bool isEncrypted() const;
+    DOMStringImpl *plainTextvalue() const;
+    GpgME::DecryptionResult decryptionResult() { return m_decryptionResult; }
+#endif
     CharacterDataImpl(DocumentImpl *doc, DOMStringImpl* _text);
 
     virtual ~CharacterDataImpl();
@@ -81,6 +105,13 @@
     DOMStringImpl *str;
 
     void dispatchModifiedEvent(DOMStringImpl *prevValue);
+#ifdef KLEO_SUPPORT
+    // Should only used for rendering purposes!
+    void decrypt();
+
+    DOMStringImpl *m_plainTextValue;
+    GpgME::DecryptionResult m_decryptionResult;
+#endif
 };
 
 // ----------------------------------------------------------------------------
@@ -111,7 +142,8 @@
 {
 public:
     TextImpl(DocumentImpl *impl, DOMStringImpl* _text)
-        : CharacterDataImpl(impl, _text) {}
+        : CharacterDataImpl(impl, _text) {
+        }
     TextImpl(DocumentImpl *impl)
         : CharacterDataImpl(impl, 0) {}
 
@@ -148,6 +180,7 @@
      *  @return An html escaped version of the substring.
      */
     DOMString toString(long long startOffset, long long endOffset) const;
+
 protected:
     virtual TextImpl *createNew(DOMStringImpl *_str);
 };
