# 1. DIV decryption
###################

It's still lacking an implementation of the div element which allows the user to view the plain text of an encrypted message.

* TextImpl is the node will contain the cyphertext.
* Only TextImpl::renderString() function should return the plain text.
* TextRender is the element which obviously renders text, and should be changed to add a border-frame showing that the text is "secure", etc.
* Interesting fact: security of the DIV element is in one aspect much easier than in the case of the input element, because by default the text contained by the DIV element is already encrypted, and thus we only need to change the renderer text "directly".

# 1.1 Rendering
###############
* a TextImpl is rendered by a RenderText, which is a subclass of RenderArena, and can contain some InlineTextBox'es which render lines of text.
* The m_object of an InlineTextBox is the parent RenderText

* The following will be the models generated by KHTML for an example div according to kdelibs/khtml/doc/inline_model.html and kdelibs/khtml/doc/DESIGN.html:
 _________________
|Lorem ipsum dolor|
|sit amet.        |
|_________________|

=> 1 block level element
=> 2 lines (because of wrapping).

<div>Lorem ipsum dolor sit amet.</div>

Internal Tree
=============
[HTMLDivElementImpl
   [TextImpl "Lorem ipsum dolor sit amet."]
]
Render tree:
===========
[RenderBlock1
  [RenderText1 "Lorem ipsum dolor sit amet."]
]
Linebox tree:
============
[RootInlineBox1
  [InlineTextBox1 "Lorem ipsum dolor"]
]
[RootInlineBox2
  [InlineTextBox2 "sit amet."]
]
Linkage of LineBox tree:
========================
RootInlineBox1->nextOnLine() == InlineTextBox1 ->nextOnLine() == null
RootInlineBox2->nextOnLine() == InlineTextBox2 ->nextOnLine() == null

Correspondence Render tree / Linebox tree:
==========================================
(just for some objects:)

( RenderBlock1 -> firstLineBox()  ==  RootInlineBox1 ) ->nextLineBox() == (RootInlineBox2 == RenderBlock1 -> lastLineBox() )
( RenderInline1 ->firstLineBox()  ==  InlineFlowBox1 ) -> nextLineBox() == (InlineFlowBox2 == RenderInline1 -> lastLineBox() )
( RenderText1 -> firstTextBox()   ==  InlineTextBox1 ) -> nextTextBox() == (InlineTextBox2 == RenderText1 -> lastLineBox() )

* The renderer uses CSS internally for everything. We will need to somehow limit this to for example do not allow changing the background when the DIV is encrypted, and this property will be inherited or at least accesible by the children renderers.

* We need to draw a frame and some text or an icon to show the DIV is encrypted.

# 1.2 Parser
############
* We need to be sure an encrypted DIV cannot contain anything else than *one* TextImpl children. In the parser we need to check that if the DIV support encryption, the only possible children is TextImpl, and only one children. Here is a comment extracted from kdelibs/khtml/html/htmlparser.cpp:
    * We have to take care of the following error conditions:
    * 1. The element being added is explicitly forbidden inside some outer tag.
    *    In this case we should close all tags up to the one, which forbids
    *    the element, and add it afterwards.
* We can just override HtmlDivElementImpl::addChild() (which is used in the parser as mentioned above) to check if a given child node type is allowed. In that case, when the Div is encrypted, the child node will be added only if it's of type TextImpl and if there's no other child. Otherwise, HtmlDivElementImpl::addChild() would return 0, the parser will notice and will handle the error accordingly. DONE
* If any non-allowed element is inserted before a TextImpl element (for example a comment), it won't show anything.
* We need to be sure that there's no way to inject or change a TextImpl inside an encrypted DIV.

# 1.3 Misc
##########
* We should somehow chnage the z-index of the DIV element.
* Worry about attacks based on selected text?
* An icon in konqueror statusbar showing the site contains encrypted data, showing the encrypted data so that the user really knows the site is not doing any "phishing" attack, acting as if the text is being sent/received securely when not.
